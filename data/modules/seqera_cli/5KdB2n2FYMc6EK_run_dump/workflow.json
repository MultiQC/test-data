{
  "status" : "SUCCEEDED",
  "ownerId" : 8456,
  "repository" : "https://github.com/nf-core/sarek",
  "id" : "5KdB2n2FYMc6EK",
  "submit" : "2023-10-11T21:40:55Z",
  "start" : "2023-10-11T21:49:12Z",
  "complete" : "2023-10-12T05:10:56Z",
  "dateCreated" : "2023-10-11T21:40:55Z",
  "lastUpdated" : "2023-10-12T05:10:59Z",
  "runName" : "aws-fusionv2_nvme-nf-core_sarek-2-19f92c3f88c74e24b8d4308f47ae46c0",
  "sessionId" : "bb2cb1c5-cd95-470d-833a-67b26ed1e594",
  "profile" : "test_full_germline",
  "workDir" : "s3://scidev-eu-west-1/scratch/5KdB2n2FYMc6EK",
  "commitId" : "f034b737630972e90aeae851e236f9d4292b9a4f",
  "userName" : "esha-joshi",
  "scriptId" : "19395081df9818c094dfc418711f9fd2",
  "revision" : "3.3.2",
  "commandLine" : "nextflow run 'https://github.com/nf-core/sarek' -name aws-fusionv2_nvme-nf-core_sarek-2-19f92c3f88c74e24b8d4308f47ae46c0 -params-file 'https://api.tower.nf/ephemeral/MOshY1-bk2pWJJMnjTpk_A.json' -with-tower -r 3.3.2 -profile test_full_germline",
  "projectName" : "nf-core/sarek",
  "scriptName" : "main.nf",
  "launchId" : "3iKsrQW1YB3Pp6IyJcenQW",
  "configFiles" : [ "/.nextflow/assets/nf-core/sarek/nextflow.config", "/nextflow.config" ],
  "params" : {
    "custom_config_base" : "https://raw.githubusercontent.com/nf-core/configs/master",
    "nucleotides_per_second" : 200000,
    "joint_mutect2" : false,
    "vep_genome" : "GRCh38",
    "validation-S3Path-check" : false,
    "plaintext_email" : false,
    "aligner" : "bwa-mem",
    "chr_dir" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Sequence/Chromosomes",
    "mappability" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/Control-FREEC/out100m2_hg38.gem",
    "known_indels_vqsr" : "--resource:gatk,known=false,training=true,truth=true,prior=10.0 Homo_sapiens_assembly38.known_indels.vcf.gz --resource:mills,known=false,training=true,truth=true,prior=10.0 Mills_and_1000G_gold_standard.indels.hg38.vcf.gz",
    "bwamem2" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Sequence/BWAmem2Index/",
    "save_split_fastqs" : false,
    "vep_cache_version" : 110,
    "only_paired_variant_calling" : false,
    "ascat_min_base_qual" : 20,
    "save_trimmed" : false,
    "vep_out_format" : "vcf",
    "clip_r1" : 0,
    "clip_r2" : 0,
    "cf_contamination_adjustment" : false,
    "ascat_alleles" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/ASCAT/G1000_alleles_hg38.zip",
    "fasta_fai" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Sequence/WholeGenomeFasta/Homo_sapiens_assembly38.fasta.fai",
    "version" : false,
    "trim_nextseq" : 0,
    "known_indels" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/{Mills_and_1000G_gold_standard.indels.hg38,beta/Homo_sapiens_assembly38.known_indels}.vcf.gz",
    "publish_dir_mode" : "copy",
    "input" : "https://raw.githubusercontent.com/nf-core/test-datasets/sarek/testdata/csv/NA12878_WGS_30x_full_test.csv",
    "trim_fastq" : false,
    "config_profile_name" : "Full test profile for germline VC",
    "validationSkipDuplicateCheck" : false,
    "validationSchemaIgnoreParams" : "cf_ploidy,genomes,igenomes_base",
    "build_only_index" : false,
    "three_prime_clip_r1" : 0,
    "validation-skip-duplicate-check" : false,
    "ascat_loci_rt" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/ASCAT/RT_G1000_hg38.zip",
    "three_prime_clip_r2" : 0,
    "tools" : "strelka,freebayes,haplotypecaller,deepvariant,manta,tiddit,cnvkit,vep",
    "custom_config_version" : "master",
    "fasta" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Sequence/WholeGenomeFasta/Homo_sapiens_assembly38.fasta",
    "pon" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/1000g_pon.hg38.vcf.gz",
    "sentieon_haplotyper_emit_mode" : "variant",
    "dragmap" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Sequence/dragmap/",
    "config_profile_description" : "Full test dataset to check germline VC pipeline function",
    "genomes" : {
      "GATK.GRCh37" : {
        "ascat_alleles" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Annotation/ASCAT/G1000_alleles_hg19.zip",
        "ascat_genome" : "hg19",
        "ascat_loci" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Annotation/ASCAT/G1000_loci_hg19.zip",
        "ascat_loci_gc" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Annotation/ASCAT/GC_G1000_hg19.zip",
        "ascat_loci_rt" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Annotation/ASCAT/RT_G1000_hg19.zip",
        "bwa" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Sequence/BWAIndex/",
        "chr_dir" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Sequence/Chromosomes",
        "dbsnp" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Annotation/GATKBundle/dbsnp_138.b37.vcf.gz",
        "dbsnp_tbi" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Annotation/GATKBundle/dbsnp_138.b37.vcf.gz.tbi",
        "dbsnp_vqsr" : "--resource:dbsnp,known=false,training=true,truth=false,prior=2.0 dbsnp_138.b37.vcf.gz",
        "dict" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Sequence/WholeGenomeFasta/human_g1k_v37_decoy.dict",
        "fasta" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Sequence/WholeGenomeFasta/human_g1k_v37_decoy.fasta",
        "fasta_fai" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Sequence/WholeGenomeFasta/human_g1k_v37_decoy.fasta.fai",
        "germline_resource" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Annotation/GATKBundle/af-only-gnomad.raw.sites.vcf.gz",
        "germline_resource_tbi" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Annotation/GATKBundle/af-only-gnomad.raw.sites.vcf.gz.tbi",
        "intervals" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Annotation/intervals/wgs_calling_regions_Sarek.list",
        "known_snps" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Annotation/GATKBundle/1000G_phase1.snps.high_confidence.b37.vcf.gz",
        "known_snps_tbi" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Annotation/GATKBundle/1000G_phase1.snps.high_confidence.b37.vcf.gz.tbi",
        "known_snps_vqsr" : "--resource:1000G,known=false,training=true,truth=true,prior=10.0 1000G_phase1.snps.high_confidence.b37.vcf.gz",
        "known_indels" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Annotation/GATKBundle/{1000G_phase1,Mills_and_1000G_gold_standard}.indels.b37.vcf.gz",
        "known_indels_tbi" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Annotation/GATKBundle/{1000G_phase1,Mills_and_1000G_gold_standard}.indels.b37.vcf.gz.tbi",
        "known_indels_vqsr" : "--resource:1000G,known=false,training=true,truth=true,prior=10.0 1000G_phase1.indels.b37.vcf.gz --resource:mills,known=false,training=true,truth=true,prior=10.0 Mills_and_1000G_gold_standard.indels.b37.vcf.gz",
        "mappability" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Annotation/Control-FREEC/out100m2_hg19.gem",
        "snpeff_db" : 87,
        "snpeff_genome" : "GRCh37",
        "vep_cache_version" : 110,
        "vep_genome" : "GRCh37",
        "vep_species" : "homo_sapiens"
      },
      "GATK.GRCh38" : {
        "ascat_alleles" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/ASCAT/G1000_alleles_hg38.zip",
        "ascat_genome" : "hg38",
        "ascat_loci" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/ASCAT/G1000_loci_hg38.zip",
        "ascat_loci_gc" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/ASCAT/GC_G1000_hg38.zip",
        "ascat_loci_rt" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/ASCAT/RT_G1000_hg38.zip",
        "bwa" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Sequence/BWAIndex/",
        "bwamem2" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Sequence/BWAmem2Index/",
        "dragmap" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Sequence/dragmap/",
        "chr_dir" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Sequence/Chromosomes",
        "cf_chrom_len" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Sequence/Length/Homo_sapiens_assembly38.len",
        "dbsnp" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/dbsnp_146.hg38.vcf.gz",
        "dbsnp_tbi" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/dbsnp_146.hg38.vcf.gz.tbi",
        "dbsnp_vqsr" : "--resource:dbsnp,known=false,training=true,truth=false,prior=2.0 dbsnp_146.hg38.vcf.gz",
        "dict" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Sequence/WholeGenomeFasta/Homo_sapiens_assembly38.dict",
        "fasta" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Sequence/WholeGenomeFasta/Homo_sapiens_assembly38.fasta",
        "fasta_fai" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Sequence/WholeGenomeFasta/Homo_sapiens_assembly38.fasta.fai",
        "germline_resource" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/af-only-gnomad.hg38.vcf.gz",
        "germline_resource_tbi" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/af-only-gnomad.hg38.vcf.gz.tbi",
        "intervals" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/intervals/wgs_calling_regions_noseconds.hg38.bed",
        "known_snps" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/1000G_omni2.5.hg38.vcf.gz",
        "known_snps_tbi" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/1000G_omni2.5.hg38.vcf.gz.tbi",
        "known_snps_vqsr" : "--resource:1000G,known=false,training=true,truth=true,prior=10.0 1000G_omni2.5.hg38.vcf.gz",
        "known_indels" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/{Mills_and_1000G_gold_standard.indels.hg38,beta/Homo_sapiens_assembly38.known_indels}.vcf.gz",
        "known_indels_tbi" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/{Mills_and_1000G_gold_standard.indels.hg38,beta/Homo_sapiens_assembly38.known_indels}.vcf.gz.tbi",
        "known_indels_vqsr" : "--resource:gatk,known=false,training=true,truth=true,prior=10.0 Homo_sapiens_assembly38.known_indels.vcf.gz --resource:mills,known=false,training=true,truth=true,prior=10.0 Mills_and_1000G_gold_standard.indels.hg38.vcf.gz",
        "mappability" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/Control-FREEC/out100m2_hg38.gem",
        "pon" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/1000g_pon.hg38.vcf.gz",
        "pon_tbi" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/1000g_pon.hg38.vcf.gz.tbi",
        "snpeff_db" : 105,
        "snpeff_genome" : "GRCh38",
        "vep_cache_version" : 110,
        "vep_genome" : "GRCh38",
        "vep_species" : "homo_sapiens"
      },
      "Ensembl.GRCh37" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Homo_sapiens/Ensembl/GRCh37/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Homo_sapiens/Ensembl/GRCh37/Sequence/WholeGenomeFasta/genome.fa",
        "readme" : "s3://ngi-igenomes/igenomes/Homo_sapiens/Ensembl/GRCh37/Annotation/README.txt",
        "snpeff_db" : 87,
        "snpeff_genome" : "GRCh37",
        "vep_cache_version" : 110,
        "vep_genome" : "GRCh37",
        "vep_species" : "homo_sapiens"
      },
      "NCBI.GRCh38" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Homo_sapiens/NCBI/GRCh38/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Homo_sapiens/NCBI/GRCh38/Sequence/WholeGenomeFasta/genome.fa",
        "snpeff_db" : 105,
        "snpeff_genome" : "GRCh38",
        "vep_cache_version" : 110,
        "vep_genome" : "GRCh38",
        "vep_species" : "homo_sapiens"
      },
      "CHM13" : {
        "fasta" : "s3://ngi-igenomes/igenomes/Homo_sapiens/UCSC/CHM13/Sequence/WholeGenomeFasta/genome.fa",
        "bwa" : "s3://ngi-igenomes/igenomes/Homo_sapiens/UCSC/CHM13/Sequence/BWAIndex/",
        "bwamem2" : "s3://ngi-igenomes/igenomes/Homo_sapiens/UCSC/CHM13/Sequence/BWAmem2Index/"
      },
      "GRCm38" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Mus_musculus/Ensembl/GRCm38/Sequence/BWAIndex/version0.6.0/",
        "chr_dir" : "s3://ngi-igenomes/igenomes/Mus_musculus/Ensembl/GRCm38/Sequence/Chromosomes",
        "dbsnp" : "s3://ngi-igenomes/igenomes/Mus_musculus/Ensembl/GRCm38/MouseGenomeProject/mgp.v5.merged.snps_all.dbSNP142.vcf.gz",
        "dbsnp_tbi" : "s3://ngi-igenomes/igenomes/Mus_musculus/Ensembl/GRCm38/MouseGenomeProject/mgp.v5.merged.snps_all.dbSNP142.vcf.gz.tbi",
        "dict" : "s3://ngi-igenomes/igenomes/Mus_musculus/Ensembl/GRCm38/Sequence/WholeGenomeFasta/genome.dict",
        "fasta" : "s3://ngi-igenomes/igenomes/Mus_musculus/Ensembl/GRCm38/Sequence/WholeGenomeFasta/genome.fa",
        "fasta_fai" : "s3://ngi-igenomes/igenomes/Mus_musculus/Ensembl/GRCm38/Sequence/WholeGenomeFasta/genome.fa.fai",
        "intervals" : "s3://ngi-igenomes/igenomes/Mus_musculus/Ensembl/GRCm38/Annotation/intervals/GRCm38_calling_list.bed",
        "known_indels" : "s3://ngi-igenomes/igenomes/Mus_musculus/Ensembl/GRCm38/MouseGenomeProject/mgp.v5.merged.indels.dbSNP142.normed.vcf.gz",
        "known_indels_tbi" : "s3://ngi-igenomes/igenomes/Mus_musculus/Ensembl/GRCm38/MouseGenomeProject/mgp.v5.merged.indels.dbSNP142.normed.vcf.gz.tbi",
        "mappability" : "s3://ngi-igenomes/igenomes/Mus_musculus/Ensembl/GRCm38/Annotation/Control-FREEC/GRCm38_68_mm10.gem",
        "readme" : "s3://ngi-igenomes/igenomes/Mus_musculus/Ensembl/GRCm38/Annotation/README.txt",
        "snpeff_db" : 99,
        "snpeff_genome" : "GRCm38",
        "vep_cache_version" : 102,
        "vep_genome" : "GRCm38",
        "vep_species" : "mus_musculus"
      },
      "TAIR10" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Arabidopsis_thaliana/Ensembl/TAIR10/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Arabidopsis_thaliana/Ensembl/TAIR10/Sequence/WholeGenomeFasta/genome.fa",
        "readme" : "s3://ngi-igenomes/igenomes/Arabidopsis_thaliana/Ensembl/TAIR10/Annotation/README.txt"
      },
      "EB2" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Bacillus_subtilis_168/Ensembl/EB2/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Bacillus_subtilis_168/Ensembl/EB2/Sequence/WholeGenomeFasta/genome.fa",
        "readme" : "s3://ngi-igenomes/igenomes/Bacillus_subtilis_168/Ensembl/EB2/Annotation/README.txt"
      },
      "UMD3.1" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Bos_taurus/Ensembl/UMD3.1/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Bos_taurus/Ensembl/UMD3.1/Sequence/WholeGenomeFasta/genome.fa",
        "readme" : "s3://ngi-igenomes/igenomes/Bos_taurus/Ensembl/UMD3.1/Annotation/README.txt",
        "snpeff_db" : 75,
        "snpeff_genome" : "UMD3.1",
        "vep_cache_version" : 94,
        "vep_genome" : "UMD3.1",
        "vep_species" : "bos_taurus"
      },
      "WBcel235" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Caenorhabditis_elegans/Ensembl/WBcel235/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Caenorhabditis_elegans/Ensembl/WBcel235/Sequence/WholeGenomeFasta/genome.fa",
        "snpeff_db" : 105,
        "snpeff_genome" : "WBcel235",
        "vep_cache_version" : 110,
        "vep_genome" : "WBcel235",
        "vep_species" : "caenorhabditis_elegans"
      },
      "CanFam3.1" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Canis_familiaris/Ensembl/CanFam3.1/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Canis_familiaris/Ensembl/CanFam3.1/Sequence/WholeGenomeFasta/genome.fa",
        "readme" : "s3://ngi-igenomes/igenomes/Canis_familiaris/Ensembl/CanFam3.1/Annotation/README.txt",
        "snpeff_db" : 99,
        "snpeff_genome" : "CanFam3.1",
        "vep_cache_version" : 104,
        "vep_genome" : "CanFam3.1",
        "vep_species" : "canis_lupus_familiaris"
      },
      "GRCz10" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Danio_rerio/Ensembl/GRCz10/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Danio_rerio/Ensembl/GRCz10/Sequence/WholeGenomeFasta/genome.fa"
      },
      "BDGP6" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Drosophila_melanogaster/Ensembl/BDGP6/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Drosophila_melanogaster/Ensembl/BDGP6/Sequence/WholeGenomeFasta/genome.fa"
      },
      "EquCab2" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Equus_caballus/Ensembl/EquCab2/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Equus_caballus/Ensembl/EquCab2/Sequence/WholeGenomeFasta/genome.fa",
        "readme" : "s3://ngi-igenomes/igenomes/Equus_caballus/Ensembl/EquCab2/Annotation/README.txt"
      },
      "EB1" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Escherichia_coli_K_12_DH10B/Ensembl/EB1/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Escherichia_coli_K_12_DH10B/Ensembl/EB1/Sequence/WholeGenomeFasta/genome.fa",
        "readme" : "s3://ngi-igenomes/igenomes/Escherichia_coli_K_12_DH10B/Ensembl/EB1/Annotation/README.txt"
      },
      "Galgal4" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Gallus_gallus/Ensembl/Galgal4/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Gallus_gallus/Ensembl/Galgal4/Sequence/WholeGenomeFasta/genome.fa"
      },
      "Gm01" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Glycine_max/Ensembl/Gm01/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Glycine_max/Ensembl/Gm01/Sequence/WholeGenomeFasta/genome.fa",
        "readme" : "s3://ngi-igenomes/igenomes/Glycine_max/Ensembl/Gm01/Annotation/README.txt"
      },
      "Mmul_1" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Macaca_mulatta/Ensembl/Mmul_1/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Macaca_mulatta/Ensembl/Mmul_1/Sequence/WholeGenomeFasta/genome.fa",
        "readme" : "s3://ngi-igenomes/igenomes/Macaca_mulatta/Ensembl/Mmul_1/Annotation/README.txt"
      },
      "IRGSP-1.0" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Oryza_sativa_japonica/Ensembl/IRGSP-1.0/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Oryza_sativa_japonica/Ensembl/IRGSP-1.0/Sequence/WholeGenomeFasta/genome.fa"
      },
      "CHIMP2.1.4" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Pan_troglodytes/Ensembl/CHIMP2.1.4/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Pan_troglodytes/Ensembl/CHIMP2.1.4/Sequence/WholeGenomeFasta/genome.fa",
        "readme" : "s3://ngi-igenomes/igenomes/Pan_troglodytes/Ensembl/CHIMP2.1.4/Annotation/README.txt"
      },
      "Rnor_5.0" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Rattus_norvegicus/Ensembl/Rnor_5.0/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Rattus_norvegicus/Ensembl/Rnor_5.0/Sequence/WholeGenomeFasta/genome.fa"
      },
      "Rnor_6.0" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Rattus_norvegicus/Ensembl/Rnor_6.0/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Rattus_norvegicus/Ensembl/Rnor_6.0/Sequence/WholeGenomeFasta/genome.fa"
      },
      "R64-1-1" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Saccharomyces_cerevisiae/Ensembl/R64-1-1/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Saccharomyces_cerevisiae/Ensembl/R64-1-1/Sequence/WholeGenomeFasta/genome.fa",
        "snpeff_db" : 105,
        "snpeff_genome" : "R64-1-1",
        "vep_cache_version" : 110,
        "vep_genome" : "R64-1-1",
        "vep_species" : "saccharomyces_cerevisiae"
      },
      "EF2" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Schizosaccharomyces_pombe/Ensembl/EF2/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Schizosaccharomyces_pombe/Ensembl/EF2/Sequence/WholeGenomeFasta/genome.fa",
        "readme" : "s3://ngi-igenomes/igenomes/Schizosaccharomyces_pombe/Ensembl/EF2/Annotation/README.txt"
      },
      "Sbi1" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Sorghum_bicolor/Ensembl/Sbi1/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Sorghum_bicolor/Ensembl/Sbi1/Sequence/WholeGenomeFasta/genome.fa",
        "readme" : "s3://ngi-igenomes/igenomes/Sorghum_bicolor/Ensembl/Sbi1/Annotation/README.txt"
      },
      "Sscrofa10.2" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Sus_scrofa/Ensembl/Sscrofa10.2/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Sus_scrofa/Ensembl/Sscrofa10.2/Sequence/WholeGenomeFasta/genome.fa",
        "readme" : "s3://ngi-igenomes/igenomes/Sus_scrofa/Ensembl/Sscrofa10.2/Annotation/README.txt"
      },
      "AGPv3" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Zea_mays/Ensembl/AGPv3/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Zea_mays/Ensembl/AGPv3/Sequence/WholeGenomeFasta/genome.fa"
      },
      "hg38" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Homo_sapiens/UCSC/hg38/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Homo_sapiens/UCSC/hg38/Sequence/WholeGenomeFasta/genome.fa",
        "snpeff_db" : 105,
        "snpeff_genome" : "GRCh38",
        "vep_cache_version" : 110,
        "vep_genome" : "GRCh38",
        "vep_species" : "homo_sapiens"
      },
      "hg19" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Homo_sapiens/UCSC/hg19/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Homo_sapiens/UCSC/hg19/Sequence/WholeGenomeFasta/genome.fa",
        "readme" : "s3://ngi-igenomes/igenomes/Homo_sapiens/UCSC/hg19/Annotation/README.txt",
        "snpeff_db" : 87,
        "snpeff_genome" : "GRCh37",
        "vep_cache_version" : 110,
        "vep_genome" : "GRCh37",
        "vep_species" : "homo_sapiens"
      },
      "mm10" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Mus_musculus/UCSC/mm10/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Mus_musculus/UCSC/mm10/Sequence/WholeGenomeFasta/genome.fa",
        "readme" : "s3://ngi-igenomes/igenomes/Mus_musculus/UCSC/mm10/Annotation/README.txt",
        "snpeff_db" : 99,
        "snpeff_genome" : "GRCm38",
        "vep_cache_version" : 102,
        "vep_genome" : "GRCm38",
        "vep_species" : "mus_musculus"
      },
      "bosTau8" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Bos_taurus/UCSC/bosTau8/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Bos_taurus/UCSC/bosTau8/Sequence/WholeGenomeFasta/genome.fa"
      },
      "ce10" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Caenorhabditis_elegans/UCSC/ce10/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Caenorhabditis_elegans/UCSC/ce10/Sequence/WholeGenomeFasta/genome.fa",
        "readme" : "s3://ngi-igenomes/igenomes/Caenorhabditis_elegans/UCSC/ce10/Annotation/README.txt"
      },
      "canFam3" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Canis_familiaris/UCSC/canFam3/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Canis_familiaris/UCSC/canFam3/Sequence/WholeGenomeFasta/genome.fa",
        "readme" : "s3://ngi-igenomes/igenomes/Canis_familiaris/UCSC/canFam3/Annotation/README.txt"
      },
      "danRer10" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Danio_rerio/UCSC/danRer10/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Danio_rerio/UCSC/danRer10/Sequence/WholeGenomeFasta/genome.fa"
      },
      "dm6" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Drosophila_melanogaster/UCSC/dm6/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Drosophila_melanogaster/UCSC/dm6/Sequence/WholeGenomeFasta/genome.fa"
      },
      "equCab2" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Equus_caballus/UCSC/equCab2/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Equus_caballus/UCSC/equCab2/Sequence/WholeGenomeFasta/genome.fa",
        "readme" : "s3://ngi-igenomes/igenomes/Equus_caballus/UCSC/equCab2/Annotation/README.txt"
      },
      "galGal4" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Gallus_gallus/UCSC/galGal4/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Gallus_gallus/UCSC/galGal4/Sequence/WholeGenomeFasta/genome.fa",
        "readme" : "s3://ngi-igenomes/igenomes/Gallus_gallus/UCSC/galGal4/Annotation/README.txt"
      },
      "panTro4" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Pan_troglodytes/UCSC/panTro4/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Pan_troglodytes/UCSC/panTro4/Sequence/WholeGenomeFasta/genome.fa",
        "readme" : "s3://ngi-igenomes/igenomes/Pan_troglodytes/UCSC/panTro4/Annotation/README.txt"
      },
      "rn6" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Rattus_norvegicus/UCSC/rn6/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Rattus_norvegicus/UCSC/rn6/Sequence/WholeGenomeFasta/genome.fa"
      },
      "sacCer3" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Saccharomyces_cerevisiae/UCSC/sacCer3/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Saccharomyces_cerevisiae/UCSC/sacCer3/Sequence/WholeGenomeFasta/genome.fa",
        "readme" : "s3://ngi-igenomes/igenomes/Saccharomyces_cerevisiae/UCSC/sacCer3/Annotation/README.txt"
      },
      "susScr3" : {
        "bwa" : "s3://ngi-igenomes/igenomes/Sus_scrofa/UCSC/susScr3/Sequence/BWAIndex/version0.6.0/",
        "fasta" : "s3://ngi-igenomes/igenomes/Sus_scrofa/UCSC/susScr3/Sequence/WholeGenomeFasta/genome.fa",
        "readme" : "s3://ngi-igenomes/igenomes/Sus_scrofa/UCSC/susScr3/Annotation/README.txt"
      }
    },
    "split_fastq" : 50000000,
    "wes" : false,
    "cf_chrom_len" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Sequence/Length/Homo_sapiens_assembly38.len",
    "ascat_loci" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/ASCAT/G1000_loci_hg38.zip",
    "ascat_genome" : "hg38",
    "outdir" : "s3://scidev-eu-west-1/projects/fusion_benchmarking/fusionv2_nvme-nf-core_sarek-2-19f92c3f88c74e24b8d4308f47ae46c0/",
    "genome" : "GATK.GRCh38",
    "help" : false,
    "cf_minqual" : 0,
    "germline_resource" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/af-only-gnomad.hg38.vcf.gz",
    "save_reference" : false,
    "monochrome_logs" : false,
    "known_snps_vqsr" : "--resource:1000G,known=false,training=true,truth=true,prior=10.0 1000G_omni2.5.hg38.vcf.gz",
    "vep_include_fasta" : false,
    "max_cpus" : 16,
    "cf_coeff" : 0.05,
    "validationFailUnrecognisedParams" : false,
    "snpeff_db" : 105,
    "pon_tbi" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/1000g_pon.hg38.vcf.gz.tbi",
    "cf_contamination" : 0,
    "dbsnp" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/dbsnp_146.hg38.vcf.gz",
    "dict" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Sequence/WholeGenomeFasta/Homo_sapiens_assembly38.dict",
    "max_multiqc_email_size" : "25.MB",
    "max_time" : "240.h",
    "ignore_soft_clipped_bases" : false,
    "germline_resource_tbi" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/af-only-gnomad.hg38.vcf.gz.tbi",
    "validate_params" : true,
    "use_annotation_cache_keys" : true,
    "validationShowHiddenParams" : false,
    "cf_ploidy" : "2",
    "vep_custom_args" : "--everything --filter_common --per_gene --total_length --offline --format vcf",
    "bwa" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Sequence/BWAIndex/",
    "ascat_loci_gc" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/ASCAT/GC_G1000_hg38.zip",
    "snpeff_cache" : "s3://annotation-cache/snpeff_cache/",
    "validationS3PathCheck" : false,
    "intervals" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/intervals/wgs_calling_regions_noseconds.hg38.bed",
    "vep_species" : "homo_sapiens",
    "save_output_as_bam" : false,
    "igenomes_base" : "s3://ngi-igenomes/igenomes",
    "validation-show-hidden-params" : false,
    "validation-lenient-mode" : true,
    "vep_cache" : "s3://annotation-cache/vep_cache/",
    "joint_germline" : false,
    "known_indels_tbi" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/{Mills_and_1000G_gold_standard.indels.hg38,beta/Homo_sapiens_assembly38.known_indels}.vcf.gz.tbi",
    "concatenate_vcfs" : false,
    "dbnsfp_fields" : "rs_dbSNP,HGVSc_VEP,HGVSp_VEP,1000Gp3_EAS_AF,1000Gp3_AMR_AF,LRT_score,GERP++_RS,gnomAD_exomes_AF",
    "seq_platform" : "ILLUMINA",
    "cf_mincov" : 0,
    "max_memory" : "128.GB",
    "dbsnp_tbi" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/dbsnp_146.hg38.vcf.gz.tbi",
    "ascat_min_map_qual" : 35,
    "save_mapped" : false,
    "ascat_min_counts" : 10,
    "validationLenientMode" : true,
    "known_snps_tbi" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/1000G_omni2.5.hg38.vcf.gz.tbi",
    "dbsnp_vqsr" : "--resource:dbsnp,known=false,training=true,truth=false,prior=2.0 dbsnp_146.hg38.vcf.gz",
    "igenomes_ignore" : false,
    "no_intervals" : false,
    "snpeff_genome" : "GRCh38",
    "validation-fail-unrecognised-params" : false,
    "test_data_base" : "https://raw.githubusercontent.com/nf-core/test-datasets/sarek3",
    "validation-schema-ignore-params" : "cf_ploidy,genomes,igenomes_base",
    "step" : "mapping",
    "download_cache" : false,
    "group_by_umi_strategy" : "Adjacency",
    "known_snps" : "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/1000G_omni2.5.hg38.vcf.gz"
  },
  "configText" : "params {\n   input = 'https://raw.githubusercontent.com/nf-core/test-datasets/sarek/testdata/csv/NA12878_WGS_30x_full_test.csv'\n   step = 'mapping'\n   genome = 'GATK.GRCh38'\n   igenomes_base = 's3://ngi-igenomes/igenomes'\n   igenomes_ignore = false\n   save_reference = false\n   build_only_index = false\n   download_cache = false\n   no_intervals = false\n   nucleotides_per_second = 200000\n   tools = 'strelka,freebayes,haplotypecaller,deepvariant,manta,tiddit,cnvkit,vep'\n   skip_tools = null\n   split_fastq = 50000000\n   trim_fastq = false\n   clip_r1 = 0\n   clip_r2 = 0\n   three_prime_clip_r1 = 0\n   three_prime_clip_r2 = 0\n   trim_nextseq = 0\n   save_trimmed = false\n   save_split_fastqs = false\n   umi_read_structure = null\n   group_by_umi_strategy = 'Adjacency'\n   aligner = 'bwa-mem'\n   use_gatk_spark = null\n   save_mapped = false\n   save_output_as_bam = false\n   seq_center = null\n   seq_platform = 'ILLUMINA'\n   only_paired_variant_calling = false\n   ascat_ploidy = null\n   ascat_min_base_qual = 20\n   ascat_min_counts = 10\n   ascat_min_map_qual = 35\n   ascat_purity = null\n   cf_ploidy = '2'\n   cf_coeff = 0.05\n   cf_contamination = 0\n   cf_contamination_adjustment = false\n   cf_mincov = 0\n   cf_minqual = 0\n   cf_window = null\n   cnvkit_reference = null\n   concatenate_vcfs = false\n   ignore_soft_clipped_bases = false\n   wes = false\n   joint_germline = false\n   joint_mutect2 = false\n   sentieon_haplotyper_emit_mode = 'variant'\n   dbnsfp = null\n   dbnsfp_consequence = null\n   dbnsfp_fields = 'rs_dbSNP,HGVSc_VEP,HGVSp_VEP,1000Gp3_EAS_AF,1000Gp3_AMR_AF,LRT_score,GERP++_RS,gnomAD_exomes_AF'\n   dbnsfp_tbi = null\n   outdir_cache = null\n   snpeff_cache = 's3://annotation-cache/snpeff_cache/'\n   spliceai_indel = null\n   spliceai_indel_tbi = null\n   spliceai_snv = null\n   spliceai_snv_tbi = null\n   use_annotation_cache_keys = true\n   vep_cache = 's3://annotation-cache/vep_cache/'\n   vep_custom_args = '--everything --filter_common --per_gene --total_length --offline --format vcf'\n   vep_dbnsfp = null\n   vep_include_fasta = false\n   vep_loftee = null\n   vep_out_format = 'vcf'\n   vep_spliceai = null\n   vep_spliceregion = null\n   multiqc_config = null\n   multiqc_title = null\n   multiqc_logo = null\n   max_multiqc_email_size = '25.MB'\n   multiqc_methods_description = null\n   outdir = 's3://scidev-eu-west-1/projects/fusion_benchmarking/fusionv2_nvme-nf-core_sarek-2-19f92c3f88c74e24b8d4308f47ae46c0/'\n   publish_dir_mode = 'copy'\n   email = null\n   email_on_fail = null\n   plaintext_email = false\n   monochrome_logs = false\n   hook_url = null\n   help = false\n   version = false\n   config_profile_name = 'Full test profile for germline VC'\n   config_profile_description = 'Full test dataset to check germline VC pipeline function'\n   custom_config_version = 'master'\n   custom_config_base = 'https://raw.githubusercontent.com/nf-core/configs/master'\n   config_profile_contact = null\n   config_profile_url = null\n   test_data_base = 'https://raw.githubusercontent.com/nf-core/test-datasets/sarek3'\n   max_memory = '128.GB'\n   max_cpus = 16\n   max_time = '240.h'\n   validationFailUnrecognisedParams = false\n   validationLenientMode = true\n   validationSchemaIgnoreParams = 'cf_ploidy,genomes,igenomes_base'\n   validationShowHiddenParams = false\n   validate_params = true\n   genomes {\n      'GATK.GRCh37' {\n         ascat_alleles = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Annotation/ASCAT/G1000_alleles_hg19.zip'\n         ascat_genome = 'hg19'\n         ascat_loci = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Annotation/ASCAT/G1000_loci_hg19.zip'\n         ascat_loci_gc = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Annotation/ASCAT/GC_G1000_hg19.zip'\n         ascat_loci_rt = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Annotation/ASCAT/RT_G1000_hg19.zip'\n         bwa = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Sequence/BWAIndex/'\n         chr_dir = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Sequence/Chromosomes'\n         dbsnp = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Annotation/GATKBundle/dbsnp_138.b37.vcf.gz'\n         dbsnp_tbi = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Annotation/GATKBundle/dbsnp_138.b37.vcf.gz.tbi'\n         dbsnp_vqsr = '--resource:dbsnp,known=false,training=true,truth=false,prior=2.0 dbsnp_138.b37.vcf.gz'\n         dict = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Sequence/WholeGenomeFasta/human_g1k_v37_decoy.dict'\n         fasta = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Sequence/WholeGenomeFasta/human_g1k_v37_decoy.fasta'\n         fasta_fai = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Sequence/WholeGenomeFasta/human_g1k_v37_decoy.fasta.fai'\n         germline_resource = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Annotation/GATKBundle/af-only-gnomad.raw.sites.vcf.gz'\n         germline_resource_tbi = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Annotation/GATKBundle/af-only-gnomad.raw.sites.vcf.gz.tbi'\n         intervals = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Annotation/intervals/wgs_calling_regions_Sarek.list'\n         known_snps = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Annotation/GATKBundle/1000G_phase1.snps.high_confidence.b37.vcf.gz'\n         known_snps_tbi = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Annotation/GATKBundle/1000G_phase1.snps.high_confidence.b37.vcf.gz.tbi'\n         known_snps_vqsr = '--resource:1000G,known=false,training=true,truth=true,prior=10.0 1000G_phase1.snps.high_confidence.b37.vcf.gz'\n         known_indels = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Annotation/GATKBundle/{1000G_phase1,Mills_and_1000G_gold_standard}.indels.b37.vcf.gz'\n         known_indels_tbi = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Annotation/GATKBundle/{1000G_phase1,Mills_and_1000G_gold_standard}.indels.b37.vcf.gz.tbi'\n         known_indels_vqsr = '--resource:1000G,known=false,training=true,truth=true,prior=10.0 1000G_phase1.indels.b37.vcf.gz --resource:mills,known=false,training=true,truth=true,prior=10.0 Mills_and_1000G_gold_standard.indels.b37.vcf.gz'\n         mappability = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37/Annotation/Control-FREEC/out100m2_hg19.gem'\n         snpeff_db = 87\n         snpeff_genome = 'GRCh37'\n         vep_cache_version = 110\n         vep_genome = 'GRCh37'\n         vep_species = 'homo_sapiens'\n      }\n      'GATK.GRCh38' {\n         ascat_alleles = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/ASCAT/G1000_alleles_hg38.zip'\n         ascat_genome = 'hg38'\n         ascat_loci = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/ASCAT/G1000_loci_hg38.zip'\n         ascat_loci_gc = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/ASCAT/GC_G1000_hg38.zip'\n         ascat_loci_rt = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/ASCAT/RT_G1000_hg38.zip'\n         bwa = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Sequence/BWAIndex/'\n         bwamem2 = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Sequence/BWAmem2Index/'\n         dragmap = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Sequence/dragmap/'\n         chr_dir = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Sequence/Chromosomes'\n         cf_chrom_len = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Sequence/Length/Homo_sapiens_assembly38.len'\n         dbsnp = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/dbsnp_146.hg38.vcf.gz'\n         dbsnp_tbi = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/dbsnp_146.hg38.vcf.gz.tbi'\n         dbsnp_vqsr = '--resource:dbsnp,known=false,training=true,truth=false,prior=2.0 dbsnp_146.hg38.vcf.gz'\n         dict = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Sequence/WholeGenomeFasta/Homo_sapiens_assembly38.dict'\n         fasta = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Sequence/WholeGenomeFasta/Homo_sapiens_assembly38.fasta'\n         fasta_fai = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Sequence/WholeGenomeFasta/Homo_sapiens_assembly38.fasta.fai'\n         germline_resource = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/af-only-gnomad.hg38.vcf.gz'\n         germline_resource_tbi = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/af-only-gnomad.hg38.vcf.gz.tbi'\n         intervals = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/intervals/wgs_calling_regions_noseconds.hg38.bed'\n         known_snps = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/1000G_omni2.5.hg38.vcf.gz'\n         known_snps_tbi = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/1000G_omni2.5.hg38.vcf.gz.tbi'\n         known_snps_vqsr = '--resource:1000G,known=false,training=true,truth=true,prior=10.0 1000G_omni2.5.hg38.vcf.gz'\n         known_indels = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/{Mills_and_1000G_gold_standard.indels.hg38,beta/Homo_sapiens_assembly38.known_indels}.vcf.gz'\n         known_indels_tbi = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/{Mills_and_1000G_gold_standard.indels.hg38,beta/Homo_sapiens_assembly38.known_indels}.vcf.gz.tbi'\n         known_indels_vqsr = '--resource:gatk,known=false,training=true,truth=true,prior=10.0 Homo_sapiens_assembly38.known_indels.vcf.gz --resource:mills,known=false,training=true,truth=true,prior=10.0 Mills_and_1000G_gold_standard.indels.hg38.vcf.gz'\n         mappability = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/Control-FREEC/out100m2_hg38.gem'\n         pon = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/1000g_pon.hg38.vcf.gz'\n         pon_tbi = 's3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/1000g_pon.hg38.vcf.gz.tbi'\n         snpeff_db = 105\n         snpeff_genome = 'GRCh38'\n         vep_cache_version = 110\n         vep_genome = 'GRCh38'\n         vep_species = 'homo_sapiens'\n      }\n      'Ensembl.GRCh37' {\n         bwa = 's3://ngi-igenomes/igenomes/Homo_sapiens/Ensembl/GRCh37/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Homo_sapiens/Ensembl/GRCh37/Sequence/WholeGenomeFasta/genome.fa'\n         readme = 's3://ngi-igenomes/igenomes/Homo_sapiens/Ensembl/GRCh37/Annotation/README.txt'\n         snpeff_db = 87\n         snpeff_genome = 'GRCh37'\n         vep_cache_version = 110\n         vep_genome = 'GRCh37'\n         vep_species = 'homo_sapiens'\n      }\n      'NCBI.GRCh38' {\n         bwa = 's3://ngi-igenomes/igenomes/Homo_sapiens/NCBI/GRCh38/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Homo_sapiens/NCBI/GRCh38/Sequence/WholeGenomeFasta/genome.fa'\n         snpeff_db = 105\n         snpeff_genome = 'GRCh38'\n         vep_cache_version = 110\n         vep_genome = 'GRCh38'\n         vep_species = 'homo_sapiens'\n      }\n      CHM13 {\n         fasta = 's3://ngi-igenomes/igenomes/Homo_sapiens/UCSC/CHM13/Sequence/WholeGenomeFasta/genome.fa'\n         bwa = 's3://ngi-igenomes/igenomes/Homo_sapiens/UCSC/CHM13/Sequence/BWAIndex/'\n         bwamem2 = 's3://ngi-igenomes/igenomes/Homo_sapiens/UCSC/CHM13/Sequence/BWAmem2Index/'\n      }\n      GRCm38 {\n         bwa = 's3://ngi-igenomes/igenomes/Mus_musculus/Ensembl/GRCm38/Sequence/BWAIndex/version0.6.0/'\n         chr_dir = 's3://ngi-igenomes/igenomes/Mus_musculus/Ensembl/GRCm38/Sequence/Chromosomes'\n         dbsnp = 's3://ngi-igenomes/igenomes/Mus_musculus/Ensembl/GRCm38/MouseGenomeProject/mgp.v5.merged.snps_all.dbSNP142.vcf.gz'\n         dbsnp_tbi = 's3://ngi-igenomes/igenomes/Mus_musculus/Ensembl/GRCm38/MouseGenomeProject/mgp.v5.merged.snps_all.dbSNP142.vcf.gz.tbi'\n         dict = 's3://ngi-igenomes/igenomes/Mus_musculus/Ensembl/GRCm38/Sequence/WholeGenomeFasta/genome.dict'\n         fasta = 's3://ngi-igenomes/igenomes/Mus_musculus/Ensembl/GRCm38/Sequence/WholeGenomeFasta/genome.fa'\n         fasta_fai = 's3://ngi-igenomes/igenomes/Mus_musculus/Ensembl/GRCm38/Sequence/WholeGenomeFasta/genome.fa.fai'\n         intervals = 's3://ngi-igenomes/igenomes/Mus_musculus/Ensembl/GRCm38/Annotation/intervals/GRCm38_calling_list.bed'\n         known_indels = 's3://ngi-igenomes/igenomes/Mus_musculus/Ensembl/GRCm38/MouseGenomeProject/mgp.v5.merged.indels.dbSNP142.normed.vcf.gz'\n         known_indels_tbi = 's3://ngi-igenomes/igenomes/Mus_musculus/Ensembl/GRCm38/MouseGenomeProject/mgp.v5.merged.indels.dbSNP142.normed.vcf.gz.tbi'\n         mappability = 's3://ngi-igenomes/igenomes/Mus_musculus/Ensembl/GRCm38/Annotation/Control-FREEC/GRCm38_68_mm10.gem'\n         readme = 's3://ngi-igenomes/igenomes/Mus_musculus/Ensembl/GRCm38/Annotation/README.txt'\n         snpeff_db = 99\n         snpeff_genome = 'GRCm38'\n         vep_cache_version = 102\n         vep_genome = 'GRCm38'\n         vep_species = 'mus_musculus'\n      }\n      TAIR10 {\n         bwa = 's3://ngi-igenomes/igenomes/Arabidopsis_thaliana/Ensembl/TAIR10/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Arabidopsis_thaliana/Ensembl/TAIR10/Sequence/WholeGenomeFasta/genome.fa'\n         readme = 's3://ngi-igenomes/igenomes/Arabidopsis_thaliana/Ensembl/TAIR10/Annotation/README.txt'\n      }\n      EB2 {\n         bwa = 's3://ngi-igenomes/igenomes/Bacillus_subtilis_168/Ensembl/EB2/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Bacillus_subtilis_168/Ensembl/EB2/Sequence/WholeGenomeFasta/genome.fa'\n         readme = 's3://ngi-igenomes/igenomes/Bacillus_subtilis_168/Ensembl/EB2/Annotation/README.txt'\n      }\n      'UMD3.1' {\n         bwa = 's3://ngi-igenomes/igenomes/Bos_taurus/Ensembl/UMD3.1/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Bos_taurus/Ensembl/UMD3.1/Sequence/WholeGenomeFasta/genome.fa'\n         readme = 's3://ngi-igenomes/igenomes/Bos_taurus/Ensembl/UMD3.1/Annotation/README.txt'\n         snpeff_db = 75\n         snpeff_genome = 'UMD3.1'\n         vep_cache_version = 94\n         vep_genome = 'UMD3.1'\n         vep_species = 'bos_taurus'\n      }\n      WBcel235 {\n         bwa = 's3://ngi-igenomes/igenomes/Caenorhabditis_elegans/Ensembl/WBcel235/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Caenorhabditis_elegans/Ensembl/WBcel235/Sequence/WholeGenomeFasta/genome.fa'\n         snpeff_db = 105\n         snpeff_genome = 'WBcel235'\n         vep_cache_version = 110\n         vep_genome = 'WBcel235'\n         vep_species = 'caenorhabditis_elegans'\n      }\n      'CanFam3.1' {\n         bwa = 's3://ngi-igenomes/igenomes/Canis_familiaris/Ensembl/CanFam3.1/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Canis_familiaris/Ensembl/CanFam3.1/Sequence/WholeGenomeFasta/genome.fa'\n         readme = 's3://ngi-igenomes/igenomes/Canis_familiaris/Ensembl/CanFam3.1/Annotation/README.txt'\n         snpeff_db = 99\n         snpeff_genome = 'CanFam3.1'\n         vep_cache_version = 104\n         vep_genome = 'CanFam3.1'\n         vep_species = 'canis_lupus_familiaris'\n      }\n      GRCz10 {\n         bwa = 's3://ngi-igenomes/igenomes/Danio_rerio/Ensembl/GRCz10/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Danio_rerio/Ensembl/GRCz10/Sequence/WholeGenomeFasta/genome.fa'\n      }\n      BDGP6 {\n         bwa = 's3://ngi-igenomes/igenomes/Drosophila_melanogaster/Ensembl/BDGP6/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Drosophila_melanogaster/Ensembl/BDGP6/Sequence/WholeGenomeFasta/genome.fa'\n      }\n      EquCab2 {\n         bwa = 's3://ngi-igenomes/igenomes/Equus_caballus/Ensembl/EquCab2/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Equus_caballus/Ensembl/EquCab2/Sequence/WholeGenomeFasta/genome.fa'\n         readme = 's3://ngi-igenomes/igenomes/Equus_caballus/Ensembl/EquCab2/Annotation/README.txt'\n      }\n      EB1 {\n         bwa = 's3://ngi-igenomes/igenomes/Escherichia_coli_K_12_DH10B/Ensembl/EB1/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Escherichia_coli_K_12_DH10B/Ensembl/EB1/Sequence/WholeGenomeFasta/genome.fa'\n         readme = 's3://ngi-igenomes/igenomes/Escherichia_coli_K_12_DH10B/Ensembl/EB1/Annotation/README.txt'\n      }\n      Galgal4 {\n         bwa = 's3://ngi-igenomes/igenomes/Gallus_gallus/Ensembl/Galgal4/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Gallus_gallus/Ensembl/Galgal4/Sequence/WholeGenomeFasta/genome.fa'\n      }\n      Gm01 {\n         bwa = 's3://ngi-igenomes/igenomes/Glycine_max/Ensembl/Gm01/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Glycine_max/Ensembl/Gm01/Sequence/WholeGenomeFasta/genome.fa'\n         readme = 's3://ngi-igenomes/igenomes/Glycine_max/Ensembl/Gm01/Annotation/README.txt'\n      }\n      Mmul_1 {\n         bwa = 's3://ngi-igenomes/igenomes/Macaca_mulatta/Ensembl/Mmul_1/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Macaca_mulatta/Ensembl/Mmul_1/Sequence/WholeGenomeFasta/genome.fa'\n         readme = 's3://ngi-igenomes/igenomes/Macaca_mulatta/Ensembl/Mmul_1/Annotation/README.txt'\n      }\n      'IRGSP-1.0' {\n         bwa = 's3://ngi-igenomes/igenomes/Oryza_sativa_japonica/Ensembl/IRGSP-1.0/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Oryza_sativa_japonica/Ensembl/IRGSP-1.0/Sequence/WholeGenomeFasta/genome.fa'\n      }\n      'CHIMP2.1.4' {\n         bwa = 's3://ngi-igenomes/igenomes/Pan_troglodytes/Ensembl/CHIMP2.1.4/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Pan_troglodytes/Ensembl/CHIMP2.1.4/Sequence/WholeGenomeFasta/genome.fa'\n         readme = 's3://ngi-igenomes/igenomes/Pan_troglodytes/Ensembl/CHIMP2.1.4/Annotation/README.txt'\n      }\n      'Rnor_5.0' {\n         bwa = 's3://ngi-igenomes/igenomes/Rattus_norvegicus/Ensembl/Rnor_5.0/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Rattus_norvegicus/Ensembl/Rnor_5.0/Sequence/WholeGenomeFasta/genome.fa'\n      }\n      'Rnor_6.0' {\n         bwa = 's3://ngi-igenomes/igenomes/Rattus_norvegicus/Ensembl/Rnor_6.0/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Rattus_norvegicus/Ensembl/Rnor_6.0/Sequence/WholeGenomeFasta/genome.fa'\n      }\n      'R64-1-1' {\n         bwa = 's3://ngi-igenomes/igenomes/Saccharomyces_cerevisiae/Ensembl/R64-1-1/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Saccharomyces_cerevisiae/Ensembl/R64-1-1/Sequence/WholeGenomeFasta/genome.fa'\n         snpeff_db = 105\n         snpeff_genome = 'R64-1-1'\n         vep_cache_version = 110\n         vep_genome = 'R64-1-1'\n         vep_species = 'saccharomyces_cerevisiae'\n      }\n      EF2 {\n         bwa = 's3://ngi-igenomes/igenomes/Schizosaccharomyces_pombe/Ensembl/EF2/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Schizosaccharomyces_pombe/Ensembl/EF2/Sequence/WholeGenomeFasta/genome.fa'\n         readme = 's3://ngi-igenomes/igenomes/Schizosaccharomyces_pombe/Ensembl/EF2/Annotation/README.txt'\n      }\n      Sbi1 {\n         bwa = 's3://ngi-igenomes/igenomes/Sorghum_bicolor/Ensembl/Sbi1/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Sorghum_bicolor/Ensembl/Sbi1/Sequence/WholeGenomeFasta/genome.fa'\n         readme = 's3://ngi-igenomes/igenomes/Sorghum_bicolor/Ensembl/Sbi1/Annotation/README.txt'\n      }\n      'Sscrofa10.2' {\n         bwa = 's3://ngi-igenomes/igenomes/Sus_scrofa/Ensembl/Sscrofa10.2/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Sus_scrofa/Ensembl/Sscrofa10.2/Sequence/WholeGenomeFasta/genome.fa'\n         readme = 's3://ngi-igenomes/igenomes/Sus_scrofa/Ensembl/Sscrofa10.2/Annotation/README.txt'\n      }\n      AGPv3 {\n         bwa = 's3://ngi-igenomes/igenomes/Zea_mays/Ensembl/AGPv3/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Zea_mays/Ensembl/AGPv3/Sequence/WholeGenomeFasta/genome.fa'\n      }\n      hg38 {\n         bwa = 's3://ngi-igenomes/igenomes/Homo_sapiens/UCSC/hg38/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Homo_sapiens/UCSC/hg38/Sequence/WholeGenomeFasta/genome.fa'\n         snpeff_db = 105\n         snpeff_genome = 'GRCh38'\n         vep_cache_version = 110\n         vep_genome = 'GRCh38'\n         vep_species = 'homo_sapiens'\n      }\n      hg19 {\n         bwa = 's3://ngi-igenomes/igenomes/Homo_sapiens/UCSC/hg19/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Homo_sapiens/UCSC/hg19/Sequence/WholeGenomeFasta/genome.fa'\n         readme = 's3://ngi-igenomes/igenomes/Homo_sapiens/UCSC/hg19/Annotation/README.txt'\n         snpeff_db = 87\n         snpeff_genome = 'GRCh37'\n         vep_cache_version = 110\n         vep_genome = 'GRCh37'\n         vep_species = 'homo_sapiens'\n      }\n      mm10 {\n         bwa = 's3://ngi-igenomes/igenomes/Mus_musculus/UCSC/mm10/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Mus_musculus/UCSC/mm10/Sequence/WholeGenomeFasta/genome.fa'\n         readme = 's3://ngi-igenomes/igenomes/Mus_musculus/UCSC/mm10/Annotation/README.txt'\n         snpeff_db = 99\n         snpeff_genome = 'GRCm38'\n         vep_cache_version = 102\n         vep_genome = 'GRCm38'\n         vep_species = 'mus_musculus'\n      }\n      bosTau8 {\n         bwa = 's3://ngi-igenomes/igenomes/Bos_taurus/UCSC/bosTau8/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Bos_taurus/UCSC/bosTau8/Sequence/WholeGenomeFasta/genome.fa'\n      }\n      ce10 {\n         bwa = 's3://ngi-igenomes/igenomes/Caenorhabditis_elegans/UCSC/ce10/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Caenorhabditis_elegans/UCSC/ce10/Sequence/WholeGenomeFasta/genome.fa'\n         readme = 's3://ngi-igenomes/igenomes/Caenorhabditis_elegans/UCSC/ce10/Annotation/README.txt'\n      }\n      canFam3 {\n         bwa = 's3://ngi-igenomes/igenomes/Canis_familiaris/UCSC/canFam3/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Canis_familiaris/UCSC/canFam3/Sequence/WholeGenomeFasta/genome.fa'\n         readme = 's3://ngi-igenomes/igenomes/Canis_familiaris/UCSC/canFam3/Annotation/README.txt'\n      }\n      danRer10 {\n         bwa = 's3://ngi-igenomes/igenomes/Danio_rerio/UCSC/danRer10/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Danio_rerio/UCSC/danRer10/Sequence/WholeGenomeFasta/genome.fa'\n      }\n      dm6 {\n         bwa = 's3://ngi-igenomes/igenomes/Drosophila_melanogaster/UCSC/dm6/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Drosophila_melanogaster/UCSC/dm6/Sequence/WholeGenomeFasta/genome.fa'\n      }\n      equCab2 {\n         bwa = 's3://ngi-igenomes/igenomes/Equus_caballus/UCSC/equCab2/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Equus_caballus/UCSC/equCab2/Sequence/WholeGenomeFasta/genome.fa'\n         readme = 's3://ngi-igenomes/igenomes/Equus_caballus/UCSC/equCab2/Annotation/README.txt'\n      }\n      galGal4 {\n         bwa = 's3://ngi-igenomes/igenomes/Gallus_gallus/UCSC/galGal4/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Gallus_gallus/UCSC/galGal4/Sequence/WholeGenomeFasta/genome.fa'\n         readme = 's3://ngi-igenomes/igenomes/Gallus_gallus/UCSC/galGal4/Annotation/README.txt'\n      }\n      panTro4 {\n         bwa = 's3://ngi-igenomes/igenomes/Pan_troglodytes/UCSC/panTro4/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Pan_troglodytes/UCSC/panTro4/Sequence/WholeGenomeFasta/genome.fa'\n         readme = 's3://ngi-igenomes/igenomes/Pan_troglodytes/UCSC/panTro4/Annotation/README.txt'\n      }\n      rn6 {\n         bwa = 's3://ngi-igenomes/igenomes/Rattus_norvegicus/UCSC/rn6/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Rattus_norvegicus/UCSC/rn6/Sequence/WholeGenomeFasta/genome.fa'\n      }\n      sacCer3 {\n         bwa = 's3://ngi-igenomes/igenomes/Saccharomyces_cerevisiae/UCSC/sacCer3/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Saccharomyces_cerevisiae/UCSC/sacCer3/Sequence/WholeGenomeFasta/genome.fa'\n         readme = 's3://ngi-igenomes/igenomes/Saccharomyces_cerevisiae/UCSC/sacCer3/Annotation/README.txt'\n      }\n      susScr3 {\n         bwa = 's3://ngi-igenomes/igenomes/Sus_scrofa/UCSC/susScr3/Sequence/BWAIndex/version0.6.0/'\n         fasta = 's3://ngi-igenomes/igenomes/Sus_scrofa/UCSC/susScr3/Sequence/WholeGenomeFasta/genome.fa'\n         readme = 's3://ngi-igenomes/igenomes/Sus_scrofa/UCSC/susScr3/Annotation/README.txt'\n      }\n   }\n}\n\nprocess {\n   cpus = { check_max( 1    * task.attempt, 'cpus'   ) }\n   memory = { check_max( 6.GB * task.attempt, 'memory' ) }\n   time = { check_max( 4.h  * task.attempt, 'time'   ) }\n   shell = ['/bin/bash', '-euo', 'pipefail']\n   errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }\n   maxRetries = 1\n   maxErrors = '-1'\n   withLabel:process_single {\n      cpus = { check_max( 1                  , 'cpus'    ) }\n      memory = { check_max( 6.GB * task.attempt, 'memory'  ) }\n      time = { check_max( 4.h  * task.attempt, 'time'    ) }\n   }\n   withLabel:process_low {\n      cpus = { check_max( 2     * task.attempt, 'cpus'    ) }\n      memory = { check_max( 12.GB * task.attempt, 'memory'  ) }\n      time = { check_max( 4.h   * task.attempt, 'time'    ) }\n   }\n   withLabel:process_medium {\n      cpus = { check_max( 6     * task.attempt, 'cpus'    ) }\n      memory = { check_max( 36.GB * task.attempt, 'memory'  ) }\n      time = { check_max( 8.h   * task.attempt, 'time'    ) }\n   }\n   withLabel:process_high {\n      cpus = { check_max( 12    * task.attempt, 'cpus'    ) }\n      memory = { check_max( 72.GB * task.attempt, 'memory'  ) }\n      time = { check_max( 16.h  * task.attempt, 'time'    ) }\n   }\n   withLabel:process_long {\n      time = { check_max( 20.h  * task.attempt, 'time'    ) }\n   }\n   withLabel:process_high_memory {\n      memory = { check_max( 200.GB * task.attempt, 'memory' ) }\n   }\n   withLabel:error_ignore {\n      errorStrategy = 'ignore'\n   }\n   withLabel:error_retry {\n      errorStrategy = 'retry'\n      maxRetries = 2\n   }\n   withName:'UNZIP.*|UNTAR.*|TABIX.*|BUILD_INTERVALS|CREATE_INTERVALS_BED|CUSTOM_DUMPSOFTWAREVERSIONS|VCFTOOLS|BCFTOOLS.*|SAMTOOLS_INDEX' {\n      cpus = { check_max( 1 * task.attempt, 'cpus' ) }\n      memory = { check_max( 1.GB * task.attempt, 'memory' ) }\n   }\n   withName:FASTQC {\n      cpus = { check_max( 4 * task.attempt, 'cpus' ) }\n      memory = { check_max( 4.GB * task.attempt, 'memory' ) }\n      ext {\n         args = '--quiet'\n         when = { !(params.skip_tools && params.skip_tools.split(',').contains('fastqc')) }\n      }\n      publishDir = [[path:{ \"${params.outdir}/reports/fastqc/${meta.id}\" }, mode:'copy', pattern:'*{html,zip}']]\n   }\n   withName:FASTP {\n      cpus = { check_max( 12 * task.attempt, 'cpus' ) }\n      memory = { check_max( 4.GB * task.attempt, 'memory' ) }\n      ext {\n         args = '--disable_adapter_trimming      --split_by_lines 200000000'\n      }\n      publishDir = [[path:{ \"${params.outdir}/reports/fastp/${meta.sample}\" }, mode:'copy', pattern:'*.{html,json,log}'], [enabled:false, path:{ \"${params.outdir}/preprocessing/fastp/${meta.sample}/\" }, mode:'copy', pattern:'*.fastp.fastq.gz']]\n   }\n   withName:'BWAMEM1_MEM|BWAMEM2_MEM' {\n      cpus = { check_max( 24 * task.attempt, 'cpus' ) }\n      memory = { check_max( 30.GB * task.attempt, 'memory' ) }\n   }\n   withName:'GATK4_MARKDUPLICATES|GATK4_MARKDUPLICATESSPARK' {\n      cpus = { check_max( 6 * task.attempt, 'cpus' ) }\n      memory = { check_max( 30.GB * task.attempt, 'memory' ) }\n   }\n   withName:'GATK4_APPLYBQSR|GATK4_APPLYBQSR_SPARK|GATK4_BASERECALIBRATOR|GATK4_BASERECALIBRATOR_SPARK|GATK4_GATHERBQSRREPORTS' {\n      cpus = { check_max( 2 * task.attempt, 'cpus' ) }\n      memory = { check_max( 4.GB * task.attempt, 'memory' ) }\n   }\n   withName:MOSDEPTH {\n      cpus = { check_max( 4 * task.attempt, 'cpus' ) }\n      memory = { check_max( 4.GB * task.attempt, 'memory' ) }\n      ext {\n         args = { !params.wes ? \"-n --fast-mode --by 500\" : \"\"}\n         prefix = {\n            if (params.tools && params.tools.split(',').contains('sentieon_dedup')) {\n                \"${meta.id}.dedup\"\n            } else if (params.skip_tools && params.skip_tools.split(',').contains('markduplicates')) {\n                \"${meta.id}.sorted\"\n            } else {\n                \"${meta.id}.md\"\n            }\n        }\n         when = { !(params.skip_tools && params.skip_tools.split(',').contains('mosdepth')) }\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/reports/mosdepth/${meta.id}\" }, saveAs:{ filename -> filename.equals('versions.yml') ? null : filename }]\n   }\n   withName:'STRELKA.*|MANTA.*' {\n      cpus = { check_max( 10 * task.attempt, 'cpus' ) }\n      memory = { check_max( 8.GB * task.attempt, 'memory' ) }\n   }\n   withName:SAMTOOLS_CONVERT {\n      memory = { check_max( 4.GB * task.attempt, 'memory' ) }\n   }\n   withName:GATK4_MERGEVCFS {\n      cpus = { check_max( 2 * task.attempt, 'cpus' ) }\n      memory = { check_max( 4.GB * task.attempt, 'memory' ) }\n   }\n   withName:MULTIQC {\n      cpus = { check_max( 4 * task.attempt, 'cpus' ) }\n      memory = { check_max( 12.GB * task.attempt, 'memory' ) }\n   }\n   publishDir = [mode:'copy', path:{ \"${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}\" }, saveAs:{ filename -> filename.equals('versions.yml') ? null : filename }]\n   withName:CUSTOM_DUMPSOFTWAREVERSIONS {\n      cache = false\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/pipeline_info\" }, pattern:'*_versions.yml']\n   }\n   withName:'NFCORE_SAREK:SAREK:CRAM_QC_NO_MD:SAMTOOLS_STATS' {\n      ext {\n         when = { !(params.skip_tools && params.skip_tools.split(',').contains('samtools')) }\n         prefix = { \"${meta.id}.sorted.cram\" }\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/reports/samtools/${meta.id}\" }, saveAs:{ filename -> filename.equals('versions.yml') ? null : filename }]\n   }\n   withName:'NFCORE_SAREK:SAREK:CRAM_QC_RECAL:MOSDEPTH' {\n      ext {\n         prefix = { \"${meta.id}.recal\" }\n      }\n   }\n   withName:'NFCORE_SAREK:SAREK:CRAM_QC_RECAL:SAMTOOLS_STATS' {\n      ext {\n         prefix = { \"${meta.id}.recal.cram\" }\n         when = { !(params.skip_tools && params.skip_tools.split(',').contains('samtools')) }\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/reports/samtools/${meta.id}\" }, saveAs:{ filename -> filename.equals('versions.yml') ? null : filename }]\n   }\n   withName:BCFTOOLS_STATS {\n      ext {\n         when = { !(params.skip_tools && params.skip_tools.split(',').contains('bcftools')) }\n         prefix = { vcf.baseName - \".vcf\" }\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/reports/bcftools/${meta.variantcaller}/${meta.id}/\" }, saveAs:{ filename -> filename.equals('versions.yml') ? null : filename }]\n   }\n   withName:'VCFTOOLS_.*' {\n      ext {\n         when = { !(params.skip_tools && params.skip_tools.split(',').contains('vcftools')) }\n         prefix = { variant_file.baseName - \".vcf\" }\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/reports/vcftools/${meta.variantcaller}/${meta.id}/\" }, saveAs:{ filename -> filename.equals('versions.yml') ? null : filename }]\n   }\n   withName:VCFTOOLS_TSTV_COUNT {\n      ext {\n         args = '--TsTv-by-count'\n      }\n   }\n   withName:VCFTOOLS_TSTV_QUAL {\n      ext {\n         args = '--TsTv-by-qual'\n      }\n   }\n   withName:VCFTOOLS_SUMMARY {\n      ext {\n         args = '--FILTER-summary'\n      }\n   }\n   withName:SNPEFF_DOWNLOAD {\n      ext {\n         when = { params.tools && (params.tools.split(',').contains('snpeff') || params.tools.split(',').contains('merge')) }\n      }\n      publishDir = [mode:'copy', path:{ params.outdir_cache ? \"${params.outdir_cache}/\": \"${params.outdir}/cache/\" }]\n   }\n   withName:ENSEMBLVEP_DOWNLOAD {\n      ext {\n         when = { params.tools && (params.tools.split(',').contains('vep') || params.tools.split(',').contains('merge')) }\n         args = '--AUTO c --CONVERT --NO_BIOPERL --NO_HTSLIB --NO_TEST --NO_UPDATE'\n      }\n      publishDir = [mode:'copy', path:{ params.outdir_cache ? \"${params.outdir_cache}/\": \"${params.outdir}/cache/\" }]\n   }\n   withName:BWAMEM1_INDEX {\n      ext {\n         when = { !params.bwa && params.step == \"mapping\" && (params.aligner == \"bwa-mem\" || params.aligner == \"sentieon-bwamem\")}\n      }\n      publishDir = [enabled:false, mode:'copy', path:{ \"${params.outdir}/reference\" }, pattern:'bwa']\n   }\n   withName:BWAMEM2_INDEX {\n      ext {\n         when = { !params.bwamem2 && params.step == \"mapping\" && params.aligner == \"bwa-mem2\" }\n      }\n      publishDir = [enabled:false, mode:'copy', path:{ \"${params.outdir}/reference\" }, pattern:'bwamem2']\n   }\n   withName:DRAGMAP_HASHTABLE {\n      ext {\n         when = { !params.dragmap && params.step == \"mapping\" && params.aligner == \"dragmap\" }\n      }\n      publishDir = [enabled:false, mode:'copy', path:{ \"${params.outdir}/reference\" }, pattern:'dragmap']\n   }\n   withName:GATK4_CREATESEQUENCEDICTIONARY {\n      ext {\n         when = { !params.dict && params.step != \"annotate\" && params.step != \"controlfreec\" }\n      }\n      publishDir = [enabled:false, mode:'copy', path:{ \"${params.outdir}/reference/dict\" }, pattern:'*dict']\n   }\n   withName:MSISENSORPRO_SCAN {\n      ext {\n         when = { params.tools && params.tools.split(',').contains('msisensorpro') }\n      }\n      publishDir = [enabled:false, mode:'copy', path:{ \"${params.outdir}/reference/msi\" }, pattern:'*list']\n   }\n   withName:SAMTOOLS_FAIDX {\n      ext {\n         when = { !params.fasta_fai && params.step != \"annotate\" }\n      }\n      publishDir = [enabled:false, mode:'copy', path:{ \"${params.outdir}/reference/fai\" }, pattern:'*fai']\n   }\n   withName:TABIX_DBSNP {\n      ext {\n         when = { !params.dbsnp_tbi && params.dbsnp && ((params.step == \"mapping\" || params.step == \"markduplicates\" || params.step == \"prepare_recalibration\") || params.tools && (params.tools.split(',').contains('controlfreec') || params.tools.split(',').contains('haplotypecaller') || params.tools.split(',').contains('sentieon_haplotyper') || params.tools.split(',').contains('mutect2'))) }\n      }\n      publishDir = [enabled:false, mode:'copy', path:{ \"${params.outdir}/reference/dbsnp\" }, pattern:'*vcf.gz.tbi']\n   }\n   withName:TABIX_GERMLINE_RESOURCE {\n      ext {\n         when = { !params.germline_resource_tbi && params.germline_resource && params.tools && params.tools.split(',').contains('mutect2') }\n      }\n      publishDir = [enabled:false, mode:'copy', path:{ \"${params.outdir}/reference/germline_resource\" }, pattern:'*vcf.gz.tbi']\n   }\n   withName:TABIX_KNOWN_INDELS {\n      ext {\n         when = { !params.known_indels_tbi && params.known_indels && (params.step == 'mapping' || params.step == \"markduplicates\" || params.step == 'prepare_recalibration' || (params.tools && (params.tools.split(',').contains('haplotypecaller') || params.tools.split(',').contains('sentieon_haplotyper'))) ) }\n      }\n      publishDir = [enabled:false, mode:'copy', path:{ \"${params.outdir}/reference/known_indels\" }, pattern:'*vcf.gz.tbi']\n   }\n   withName:TABIX_KNOWN_SNPS {\n      ext {\n         when = { !params.known_snps_tbi && params.known_snps && (params.step == 'mapping' || params.step == \"markduplicates\" || params.step == 'prepare_recalibration' || (params.tools && (params.tools.split(',').contains('haplotypecaller') || params.tools.split(',').contains('sentieon_haplotyper'))) ) }\n      }\n      publishDir = [enabled:false, mode:'copy', path:{ \"${params.outdir}/reference/known_snps\" }, pattern:'*vcf.gz.tbi']\n   }\n   withName:TABIX_PON {\n      ext {\n         when = { !params.pon_tbi && params.pon && params.tools && params.tools.split(',').contains('mutect2') }\n      }\n      publishDir = [enabled:false, mode:'copy', path:{ \"${params.outdir}/reference/pon\" }, pattern:'*vcf.gz.tbi']\n   }\n   withName:'UNZIP_ALLELES|UNZIP_LOCI|UNZIP_GC|UNZIP_RT' {\n      ext {\n         when = { params.tools && params.tools.split(',').contains('ascat')}\n      }\n      publishDir = [enabled:false]\n   }\n   withName:UNTAR_CHR_DIR {\n      ext {\n         when = { params.tools && params.tools.split(',').contains('controlfreec')}\n      }\n   }\n   withName:CREATE_INTERVALS_BED {\n      publishDir = [enabled:false, mode:'copy', path:{ \"${params.outdir}/reference/intervals\" }, pattern:'*bed']\n   }\n   withName:GATK4_INTERVALLISTTOBED {\n      publishDir = [enabled:false, mode:'copy', path:{ \"${params.outdir}/reference/intervals\" }, pattern:'*bed']\n   }\n   withName:TABIX_BGZIPTABIX_INTERVAL_SPLIT {\n      ext {\n         prefix = {\"${meta.id}\"}\n      }\n      publishDir = [enabled:false, mode:'copy', path:{ \"${params.outdir}/reference/intervals\" }, pattern:'*bed.gz']\n   }\n   withName:BWAMEM1_MEM {\n      ext {\n         when = { params.aligner == \"bwa-mem\" }\n      }\n   }\n   withName:BWAMEM2_MEM {\n      ext {\n         when = { params.aligner == \"bwa-mem2\" }\n      }\n   }\n   withName:DRAGMAP_ALIGN {\n      ext {\n         when = { params.aligner == \"dragmap\" }\n         args = { \"--RGSM ${meta.patient}_${meta.sample} --RGID ${meta.read_group}\" }\n      }\n   }\n   withName:SENTIEON_BWAMEM {\n      ext {\n         when = { params.aligner == \"sentieon-bwamem\" }\n      }\n   }\n   withName:'(BWAMEM.*_MEM|DRAGMAP_ALIGN|SENTIEON_BWAMEM)' {\n      ext {\n         prefix = { params.split_fastq > 1 ? \"${meta.id}\".concat('.').concat(reads.get(0).name.tokenize('.')[0]) : \"${meta.id}.sorted\" }\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/preprocessing/\" }, pattern:'*bam', saveAs:{\n                    if (params.save_output_as_bam &&\n                        (\n                            params.save_mapped ||\n                            (params.skip_tools && params.skip_tools.split(',').contains('markduplicates')) &&\n                            !(params.tools && params.tools.split(',').contains('sentieon_dedup'))\n                        ) && (meta.size * meta.num_lanes == 1)\n                    ) { \"mapped/${meta.id}/${it}\" }\n                    else { null }\n                }]\n   }\n   withName:'(BWAMEM.*_MEM|DRAGMAP_ALIGN)' {\n      ext {\n         args2 = { params.use_gatk_spark && params.use_gatk_spark.contains('markduplicates') && (!params.skip_tools || (params.skip_tools && !params.skip_tools.split(',').contains('markduplicates'))) ? '-n' : '' }\n      }\n   }\n   withName:'BWAMEM.*_MEM|SENTIEON_BWAMEM' {\n      ext {\n         args = { meta.status == 1 ? \"-K 100000000 -Y -B 3 -R ${meta.read_group}\" : \"-K 100000000 -Y -R ${meta.read_group}\" }\n      }\n   }\n   withName:'MERGE_BAM|INDEX_MERGE_BAM' {\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/preprocessing/\" }, pattern:'*{bam,bai}', saveAs:{ (params.save_output_as_bam && (params.save_mapped || params.skip_tools && params.skip_tools.split(',').contains('markduplicates'))) ? \"mapped/${meta.id}/${it}\" : null }]\n   }\n   withName:MERGE_BAM {\n      ext {\n         prefix = { \"${meta.id}.sorted\" }\n      }\n   }\n   withName:COLLATE_FASTQ_MAP {\n      ext {\n         args2 = '-N'\n         prefix = {\"${meta.id}.mapped\"}\n      }\n      publishDir = [enabled:false]\n   }\n   withName:COLLATE_FASTQ_UNMAP {\n      ext {\n         args2 = '-N'\n         prefix = {\"${meta.id}.unmapped\"}\n      }\n      publishDir = [enabled:false]\n   }\n   withName:SAMTOOLS_VIEW_MAP_MAP {\n      ext {\n         args = '-b -f1 -F12'\n         prefix = {\"${meta.id}.map_map\"}\n      }\n      publishDir = [enabled:false]\n   }\n   withName:SAMTOOLS_VIEW_MAP_UNMAP {\n      ext {\n         args = '-b -f8 -F260'\n         prefix = {\"${meta.id}.map_unmap\"}\n      }\n      publishDir = [enabled:false]\n   }\n   withName:SAMTOOLS_VIEW_UNMAP_MAP {\n      ext {\n         args = '-b -f4 -F264'\n         prefix = {\"${meta.id}.unmap_map\"}\n      }\n      publishDir = [enabled:false]\n   }\n   withName:SAMTOOLS_VIEW_UNMAP_UNMAP {\n      ext {\n         args = '-b -f12 -F256'\n         prefix = {\"${meta.id}.unmap_unmap\"}\n      }\n      publishDir = [enabled:false]\n   }\n   withName:SAMTOOLS_MERGE_UNMAP {\n      ext {\n         prefix = {\"${meta.id}.merged_unmap\"}\n      }\n      publishDir = [enabled:false]\n   }\n   withName:CAT_FASTQ {\n      publishDir = [enabled:false]\n   }\n   withName:CRAM_TO_BAM {\n      ext {\n         args = '-b'\n      }\n   }\n   withName:BAM_TO_CRAM {\n      ext {\n         args = '-C'\n         prefix = { \"${meta.id}.converted\" }\n      }\n      publishDir = [enabled:true, mode:'copy', path:{ \"${params.outdir}/preprocessing/converted/${meta.id}\" }, pattern:'*{cram,crai}']\n   }\n   withName:'NFCORE_SAREK:SAREK:(BAM_MARKDUPLICATES|BAM_MARKDUPLICATES_SPARK):CRAM_QC_MOSDEPTH_SAMTOOLS:SAMTOOLS_STATS' {\n      ext {\n         when = { !(params.skip_tools && params.skip_tools.split(',').contains('samtools')) }\n         prefix = { \"${meta.id}.md.cram\" }\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/reports/samtools/${meta.id}\" }, saveAs:{ filename -> filename.equals('versions.yml') ? null : filename }]\n   }\n   withName:BAM_TO_CRAM_MAPPING {\n      ext {\n         when = false\n         prefix = { \"${meta.id}.sorted\" }\n      }\n      publishDir = [enabled:true, mode:'copy', path:{ \"${params.outdir}/preprocessing/mapped/${meta.id}/\" }, pattern:'*{cram,crai}']\n   }\n   withName:GATK4_ESTIMATELIBRARYCOMPLEXITY {\n      ext {\n         prefix = { \"${meta.id}.md.cram\" }\n         when = { !(params.skip_tools && params.skip_tools.split(',').contains('markduplicates_report')) }\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/reports/markduplicates/${meta.id}\" }, pattern:'*metrics']\n   }\n   withName:GATK4_MARKDUPLICATES {\n      ext {\n         args = '-REMOVE_DUPLICATES false -VALIDATION_STRINGENCY LENIENT'\n         prefix = { \"${meta.id}.md.cram\" }\n         when = { !(params.skip_tools && params.skip_tools.split(',').contains('markduplicates')) }\n      }\n      publishDir = [[enabled:true, mode:'copy', path:{ \"${params.outdir}/preprocessing/markduplicates/${meta.id}/\" }, pattern:'*{cram,crai}'], [mode:'copy', path:{ \"${params.outdir}/reports/\" }, pattern:'*metrics', saveAs:{ !(params.skip_tools && params.skip_tools.split(',').contains('markduplicates_report')) ? \"markduplicates/${meta.id}/${it}\" : null}]]\n   }\n   withName:GATK4_MARKDUPLICATES_SPARK {\n      ext {\n         args = '--remove-sequencing-duplicates false -VS LENIENT'\n         prefix = { \"${meta.id}.md.cram\" }\n      }\n      publishDir = [enabled:true, mode:'copy', path:{ \"${params.outdir}/preprocessing/markduplicates/${meta.id}/\" }, pattern:'*{cram,crai}']\n   }\n   withName:INDEX_MARKDUPLICATES {\n      publishDir = [enabled:true, mode:'copy', path:{ \"${params.outdir}/preprocessing/markduplicates/${meta.id}/\" }, pattern:'*{cram,crai}']\n   }\n   withName:'NFCORE_SAREK:SAREK:CRAM_TO_BAM' {\n      ext {\n         when = { params.save_output_as_bam }\n         prefix = { \"${meta.id}.md\" }\n      }\n      publishDir = [enabled:false, mode:'copy', path:{ \"${params.outdir}/preprocessing/markduplicates/${meta.id}/\" }, pattern:'*{md.bam,md.bam.bai}']\n   }\n   withName:SENTIEON_DEDUP {\n      ext {\n         prefix = { \"${meta.id}.dedup\" }\n         when = { params.tools && params.tools.split(',').contains('sentieon_dedup') }\n      }\n      publishDir = [[enabled:true, mode:'copy', path:{ \"${params.outdir}/preprocessing/sentieon_dedup/${meta.id}/\" }, pattern:'*{cram,crai}'], [mode:'copy', path:{ \"${params.outdir}/reports/\" }, pattern:'*{metrics,metrics.multiqc.tsv}', saveAs:{ !(params.skip_tools && params.skip_tools.split(',').contains('sentieon_dedup_report')) ? \"sentieon_dedup/${meta.id}/${it}\" : null}]]\n   }\n   withName:'GATK4_BASERECALIBRATOR|GATK4_BASERECALIBRATOR_SPARK' {\n      ext {\n         prefix = { meta.num_intervals <= 1 ? \"${meta.id}.recal\" : \"${meta.id}_${intervals.simpleName}.recal\" }\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/preprocessing/\" }, pattern:'*table', saveAs:{ meta.num_intervals > 1 ? null : \"recal_table/${meta.id}/${it}\" }]\n   }\n   withName:GATK4_GATHERBQSRREPORTS {\n      ext {\n         prefix = {\"${meta.id}.recal\"}\n         when = { meta.num_intervals > 1 }\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/preprocessing/recal_table/${meta.id}/\" }, pattern:'*table']\n   }\n   withName:'GATK4_APPLYBQSR|GATK4_APPLYBQSR_SPARK' {\n      ext {\n         prefix = { meta.num_intervals <= 1 ? \"${meta.id}.recal\" : \"${meta.id}_${intervals.simpleName}.recal\" }\n      }\n      publishDir = [enabled:true, mode:'copy', path:{ \"${params.outdir}/preprocessing/\" }, pattern:'*cram', saveAs:{ meta.num_intervals > 1 ? null : \"recalibrated/${meta.id}/${it}\" }]\n   }\n   withName:'NFCORE_SAREK:SAREK:(BAM_APPLYBQSR|BAM_APPLYBQSR_SPARK):CRAM_MERGE_INDEX_SAMTOOLS:MERGE_CRAM' {\n      ext {\n         prefix = { \"${meta.id}.recal\" }\n         when = { meta.num_intervals > 1 }\n      }\n      publishDir = [enabled:true, mode:'copy', path:{ \"${params.outdir}/preprocessing/recalibrated/${meta.id}/\" }, pattern:'*cram']\n   }\n   withName:'NFCORE_SAREK:SAREK:(BAM_APPLYBQSR|BAM_APPLYBQSR_SPARK):CRAM_MERGE_INDEX_SAMTOOLS:INDEX_CRAM' {\n      publishDir = [enabled:true, mode:'copy', path:{ \"${params.outdir}/preprocessing/recalibrated/${meta.id}/\" }, pattern:'*{recal.cram,recal.cram.crai}']\n   }\n   withName:CRAM_TO_BAM_RECAL {\n      ext {\n         prefix = { \"${meta.id}.recal\" }\n         when = { params.save_output_as_bam}\n      }\n      publishDir = [enabled:false, mode:'copy', path:{ \"${params.outdir}/preprocessing/recalibrated/${meta.id}/\" }, pattern:'*{recal.bam,recal.bam.bai}']\n   }\n   withName:FASTQTOBAM {\n      ext {\n         prefix = {\"${meta.id}\"}\n         args = { \"--read-structures $params.umi_read_structure\" }\n      }\n      publishDir = [enabled:false]\n   }\n   withName:BAM2FASTQ {\n      ext {\n         args = '-T RX'\n         when = { params.umi_read_structure }\n      }\n      publishDir = [enabled:false]\n   }\n   withName:SAMBLASTER {\n      ext {\n         args = '-M --addMateTags'\n         prefix = {\"${meta.id}_unsorted_tagged\"}\n      }\n      publishDir = [enabled:false]\n   }\n   withName:GROUPREADSBYUMI {\n      publishDir = [[path:{ \"${params.outdir}/reports/umi/\" }, mode:'copy', pattern:'*.{txt}']]\n   }\n   withName:CALLUMICONSENSUS {\n      ext {\n         args = '-M 1 -S Coordinate'\n         prefix = {\"${meta.id}_umi-consensus\"}\n      }\n      publishDir = [path:{ \"${params.outdir}/preprocessing/umi/${meta.sample}\" }, mode:'copy', pattern:'*.{bam}']\n   }\n   withName:ASCAT {\n      ext {\n         args = {[\n            \"gender\": meta.sex,\n            \"genomeVersion\": params.ascat_genome,\n            \"purity\": params.ascat_purity,\n            \"ploidy\": params.ascat_ploidy,\n            \"minCounts\": params.ascat_min_counts,\n            \"chrom_names\": meta.sex == 'XX' ? \"c(1:22, 'X')\" : \"c(1:22, 'X', 'Y')\",     // for faster testing use \"c('21', '22')\"\n            \"min_base_qual\": params.ascat_min_base_qual,\n            \"min_map_qual\": params.ascat_min_map_qual\n            ]}\n         when = { params.tools && params.tools.split(',').contains('ascat') }\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/variant_calling/ascat/${meta.id}/\" }, pattern:'*{png,cnvs.txt,metrics.txt,purityploidy.txt,segments.txt,LogR.txt,BAF.txt}']\n   }\n   withName:CNVKIT_ANTITARGET {\n      ext {\n         when = { params.tools && params.tools.split(',').contains('cnvkit') }\n      }\n      publishDir = [enabled:false, mode:'copy', path:{ \"${params.outdir}/reference/cnvkit\" }, pattern:'*{bed}']\n   }\n   withName:CNVKIT_REFERENCE {\n      ext {\n         prefix = 'cnvkit'\n         when = { params.tools && params.tools.split(',').contains('cnvkit') && !params.cnvkit_reference }\n      }\n      publishDir = [enabled:false, mode:'copy', path:{ \"${params.outdir}/reference/cnvkit\" }, pattern:'*{cnn}']\n   }\n   withName:CNVKIT_BATCH {\n      ext {\n         args = { params.wes ? \"--method hybrid --diagram --scatter\" : \"--method wgs --diagram --scatter\" }\n         when = { params.tools && params.tools.split(',').contains('cnvkit') }\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/variant_calling/cnvkit/${meta.id}/\" }, pattern:'*{bed,cnn,cnr,cns,pdf,png}']\n   }\n   withName:ASSESS_SIGNIFICANCE {\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/variant_calling/controlfreec/${meta.id}/\" }, pattern:'*{.p.value.txt}']\n   }\n   withName:'FREEC_.*' {\n      ext {\n         when = { params.tools && params.tools.split(',').contains('controlfreec') }\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/variant_calling/controlfreec/${meta.id}/\" }, pattern:'*{BedGraph,cpn,txt,_CNVs}']\n   }\n   withName:FREEC2BED {\n      ext {\n         args = { \"${params.cf_ploidy}\" }\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/variant_calling/controlfreec/${meta.id}/\" }, pattern:'*bed']\n   }\n   withName:FREEC2CIRCOS {\n      ext {\n         args = { \"${params.cf_ploidy}\" }\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/variant_calling/controlfreec/${meta.id}/\" }, pattern:'*circos.txt']\n   }\n   withName:MAKEGRAPH {\n      ext {\n         args = { \"${params.cf_ploidy}\" }\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/variant_calling/controlfreec/${meta.id}/\" }, pattern:'*png']\n   }\n   withName:FREEC_TUMORONLY {\n      ext {\n         args = {[\n                \"sample\":[\n                    inputformat: 'pileup',\n                    mateorientation: 'FR'\n                ],\n                \"general\" :[\n                    bedgraphoutput: \"TRUE\",\n                    breakpointthreshold: params.wes ? \"1.2\" : \"0.8\", //Values taken from Freec example configs\n                    breakpointtype: params.wes ? \"4\" : \"2\", // Values taken from Freec example configs\n                    coefficientofvariation: params.cf_coeff,\n                    contamination: params.cf_contamination ?: \"\",\n                    contaminationadjustment: params.cf_contamination_adjustment ? \"TRUE\" : \"\",\n                    forcegccontentnormalization: params.wes ? \"1\" : \"0\",\n                    minimalsubclonepresence: params.wes ? \"30\" : \"20\",\n                    noisydata: params.wes ? \"TRUE\" : \"FALSE\",\n                    ploidy: params.cf_ploidy,\n                    printNA:  params.wes ? \"FALSE\" : \"TRUE\",\n                    readcountthreshold:  params.wes ? \"50\" : \"10\",\n                    sex: meta.sex,\n                    //uniquematch: not set\n                    window: params.cf_window ?: \"\"\n                    ],\n                \"BAF\":[\n                    minimalcoverageperposition: params.cf_mincov ?: \"\",\n                    minimalqualityperposition: params.cf_minqual ?: \"\",\n                    //\"shiftinquality\": (optional)not set\n                ]\n            ]\n        }\n      }\n   }\n   withName:FREEC_SOMATIC {\n      ext {\n         args = {[\n                \"sample\":[\n                    inputformat: 'pileup',\n                    mateorientation: 'FR'\n                ],\n                \"control\":[\n                    inputformat: \"pileup\",\n                    mateorientation: \"FR\"\n                ],\n                \"general\" :[\n                    bedgraphoutput: \"TRUE\",\n                    breakpointthreshold: params.wes ? \"1.2\" : \"0.8\", //Values taken from Freec example configs\n                    breakpointtype: params.wes ? \"4\" : \"2\", // Values taken from Freec example configs\n                    coefficientofvariation: params.cf_coeff,\n                    contamination: params.cf_contamination ?: \"\",\n                    contaminationadjustment: params.cf_contamination_adjustment ? \"TRUE\" : \"\",\n                    forcegccontentnormalization: params.wes ? \"1\" : \"0\",\n                    minimalsubclonepresence: params.wes ? \"30\" : \"20\",\n                    noisydata: params.wes ? \"TRUE\" : \"FALSE\",\n                    ploidy: params.cf_ploidy,\n                    printNA:  params.wes ? \"FALSE\" : \"TRUE\",\n                    readcountthreshold:  params.wes ? \"50\" : \"10\",\n                    sex: meta.sex,\n                    //uniquematch: not set\n                    window: params.cf_window ?: \"\"\n                    ],\n                \"BAF\":[\n                    minimalcoverageperposition: params.cf_mincov ?: \"\",\n                    minimalqualityperposition: params.cf_minqual ?: \"\",\n                    //\"shiftinquality\": (optional)not set\n                ]\n            ]\n        }\n      }\n   }\n   withName:DEEPVARIANT {\n      ext {\n         prefix = { meta.num_intervals <= 1 ? \"${meta.id}.deepvariant\" : \"${meta.id}.deepvariant.${intervals.simpleName}\" }\n         args = { params.wes ?  \"--model_type WES\" : \"--model_type WGS\" }\n         when = { params.tools && params.tools.split(',').contains('deepvariant') }\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/variant_calling/\" }, pattern:'*{vcf.gz,vcf.gz.tbi}', saveAs:{ meta.num_intervals > 1 ? null : \"deepvariant/${meta.id}/${it}\" }]\n   }\n   withName:'MERGE_DEEPVARIANT_.*' {\n      ext {\n         prefix = {\"${meta.id}.deepvariant\"}\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/variant_calling/deepvariant/${meta.id}/\" }, pattern:'*{vcf.gz,vcf.gz.tbi}']\n   }\n   withName:MERGE_DEEPVARIANT_GVCF {\n      ext {\n         prefix = {\"${meta.id}.deepvariant.g\"}\n      }\n   }\n   withName:MERGE_FREEBAYES {\n      ext {\n         prefix = { \"${meta.id}.freebayes\" }\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/variant_calling/freebayes/${meta.id}/\" }, saveAs:{ filename -> filename.equals('versions.yml') ? null : filename }]\n   }\n   withName:FREEBAYES {\n      ext {\n         args = '--min-alternate-fraction 0.1 --min-mapping-quality 1'\n         prefix = { meta.num_intervals <= 1 ? \"${meta.id}\" : \"${meta.id}.${target_bed.simpleName}\" }\n         when = { params.tools && params.tools.split(',').contains('freebayes') }\n      }\n      publishDir = [enabled:false]\n   }\n   withName:BCFTOOLS_SORT {\n      ext {\n         prefix = { meta.num_intervals <= 1 ? meta.id + \".freebayes\" : vcf.name - \".vcf\" + \".sort\" }\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/variant_calling/\" }, pattern:'*vcf.gz', saveAs:{ meta.num_intervals > 1 ? null : \"freebayes/${meta.id}/${it}\" }]\n   }\n   withName:TABIX_VC_FREEBAYES {\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/variant_calling/freebayes/${meta.id}/\" }, saveAs:{ filename -> filename.equals('versions.yml') ? null : filename }]\n   }\n   withName:'.*:BAM_VARIANT_CALLING_SOMATIC_ALL:BAM_VARIANT_CALLING_FREEBAYES:FREEBAYES' {\n      ext {\n         args = '--pooled-continuous                             --pooled-discrete                             --genotype-qualities                             --report-genotype-likelihood-max                             --allele-balance-priors-off                             --min-alternate-fraction 0.03                             --min-repeat-entropy 1                             --min-alternate-count 2 '\n      }\n   }\n   withName:GATK4_HAPLOTYPECALLER {\n      ext {\n         args = { params.joint_germline ? \"-ERC GVCF\" : \"\" }\n         prefix = { meta.num_intervals <= 1 ? ( params.joint_germline ? \"${meta.id}.haplotypecaller.g\" : \"${meta.id}.haplotypecaller\" ) : ( params.joint_germline ? \"${meta.id}.haplotypecaller.${intervals.simpleName}.g\" :\"${meta.id}.haplotypecaller.${intervals.simpleName}\" ) }\n         when = { params.tools && params.tools.split(',').contains('haplotypecaller') }\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/variant_calling/\"}, pattern:'*{vcf.gz,vcf.gz.tbi}', saveAs:{ meta.num_intervals > 1 ? null : \"haplotypecaller/${meta.id}/${it}\" }]\n   }\n   withName:MERGE_HAPLOTYPECALLER {\n      ext {\n         prefix = { params.joint_germline ? \"${meta.id}.haplotypecaller.g\" : \"${meta.id}.haplotypecaller\" }\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/variant_calling/haplotypecaller/${meta.id}/\" }, saveAs:{ filename -> filename.equals('versions.yml') ? null : filename }]\n   }\n   withName:CNNSCOREVARIANTS {\n      publishDir = [enabled:false]\n   }\n   withName:FILTERVARIANTTRANCHES {\n      ext {\n         prefix = {\"${meta.id}.haplotypecaller\"}\n         args = { \"--info-key CNN_1D\" }\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/variant_calling/haplotypecaller/${meta.id}/\"}, pattern:'*{vcf.gz,vcf.gz.tbi}']\n   }\n   withName:'NFCORE_SAREK:SAREK:BAM_VARIANT_CALLING_GERMLINE_ALL:BAM_VARIANT_CALLING_HAPLOTYPECALLER:BAM_MERGE_INDEX_SAMTOOLS:(MERGE_BAM|INDEX_MERGE_BAM)' {\n      ext {\n         prefix = { \"${meta.id}.realigned\" }\n      }\n      publishDir = [enabled:true, mode:'copy', path:{ \"${params.outdir}/variant_calling/haplotypecaller/${meta.id}/\" }, pattern:'*{bam,bai}']\n   }\n   withName:GATK4_GENOMICSDBIMPORT {\n      ext {\n         args = { \"--genomicsdb-shared-posixfs-optimizations true --bypass-feature-reader \"}\n         prefix = { \"${meta.intervals_name}.joint\" }\n      }\n      publishDir = [enabled:false]\n   }\n   withName:GATK4_GENOTYPEGVCFS {\n      ext {\n         prefix = { meta.intervals_name }\n      }\n      publishDir = [enabled:false]\n   }\n   withName:MERGE_GENOTYPEGVCFS {\n      ext {\n         prefix = 'joint_germline'\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/variant_calling/haplotypecaller/joint_variant_calling/\" }, saveAs:{ filename -> filename.equals('versions.yml') ? null : filename }, pattern:'*{vcf.gz,vcf.gz.tbi}']\n   }\n   withName:VARIANTRECALIBRATOR_INDEL {\n      ext {\n         prefix = { \"${meta.id}_INDEL\" }\n         args = '-an QD -an MQRankSum -an ReadPosRankSum -an FS -an SOR -an DP  -mode INDEL'\n      }\n      publishDir = [enabled:false]\n   }\n   withName:VARIANTRECALIBRATOR_SNP {\n      ext {\n         prefix = { \"${meta.id}_SNP\" }\n         args = '-an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR -mode SNP'\n      }\n      publishDir = [enabled:false]\n   }\n   withName:GATK4_APPLYVQSR_SNP {\n      ext {\n         prefix = { \"${meta.id}_SNP\" }\n         args = '--truth-sensitivity-filter-level 99.9 -mode SNP'\n      }\n      publishDir = [enabled:false]\n   }\n   withName:GATK4_APPLYVQSR_INDEL {\n      ext {\n         prefix = { \"joint_germline_recalibrated\" }\n         args = '--truth-sensitivity-filter-level 99.9 -mode INDEL'\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/variant_calling/haplotypecaller/joint_variant_calling/\"}, saveAs:{ filename -> filename.equals('versions.yml') ? null : filename }, pattern:'*{vcf.gz,vcf.gz.tbi}']\n   }\n   withName:'MANTA_GERMLINE|MANTA_TUMORONLY|MANTA_SOMATIC' {\n      ext {\n         args = { params.wes ? \"--exome\" : \"\" }\n         prefix = { \"${meta.id}.manta\" }\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/variant_calling/manta/${meta.id}\" }, pattern:'*{diploid_sv,tumor_sv,somatic_sv}.{vcf.gz,vcf.gz.tbi}']\n   }\n   withName:CAT_MPILEUP {\n      publishDir = [enabled:false]\n   }\n   withName:BCFTOOLS_MPILEUP {\n      ext {\n         prefix = { meta.num_intervals <= 1 ? \"${meta.id}.bcftools\" : \"${meta.id}_${intervals.simpleName}.bcftools\" }\n         when = { params.tools && params.tools.split(',').contains('mpileup') }\n         args2 = '--multiallelic-caller'\n         args3 = '-i \\'count(GT==\"RR\")==0\\''\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/variant_calling/bcftools/${meta.id}/\" }, pattern:'*{vcf.gz,vcf.gz.tbi}', saveAs:{ meta.num_intervals > 1 ? null : it }]\n   }\n   withName:MERGE_BCFTOOLS_MPILEUP {\n      ext {\n         prefix = {\"${meta.id}.bcftools\"}\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/variant_calling/bcftools/${meta.id}/\" }, pattern:'*{vcf.gz,vcf.gz.tbi}']\n   }\n   withName:SAMTOOLS_MPILEUP {\n      ext {\n         when = { params.tools && params.tools.split(',').contains('controlfreec') }\n      }\n      publishDir = [enabled:false]\n   }\n   withName:MSISENSORPRO_MSISOMATIC {\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/variant_calling/msisensorpro/${meta.id}/\" }, saveAs:{ filename -> filename.equals('versions.yml') ? null : filename }]\n   }\n   withName:SENTIEON_HAPLOTYPER {\n      ext {\n         prefix = { meta.num_intervals <= 1 ? \"${meta.id}.haplotyper\" : \"${meta.id}.haplotyper.${intervals.simpleName}\" }\n         when = { params.tools && params.tools.split(',').contains('sentieon_haplotyper') }\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/variant_calling/\"}, pattern:'*{vcf.gz,vcf.gz.tbi}', saveAs:{ meta.num_intervals > 1 ? null : \"sentieon_haplotyper/${meta.id}/${it}\" }]\n   }\n   withName:MERGE_SENTIEON_HAPLOTYPER_VCFS {\n      ext {\n         prefix = { params.joint_germline ? \"${meta.id}.haplotyper.g\" : \"${meta.id}.haplotyper.unfiltered\" }\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/variant_calling/sentieon_haplotyper/${meta.id}/\" }, saveAs:{ filename -> filename.equals('versions.yml') ? null : filename }]\n   }\n   withName:MERGE_SENTIEON_HAPLOTYPER_GVCFS {\n      ext {\n         prefix = { \"${meta.id}.haplotyper.g\" }\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/variant_calling/sentieon_haplotyper/${meta.id}/\" }, saveAs:{ filename -> filename.equals('versions.yml') ? null : filename }]\n   }\n   withName:SENTIEON_GVCFTYPER {\n      ext {\n         args = { \"--allow-old-rms-mapping-quality-annotation-data\" }\n         prefix = { meta.intervals_name }\n      }\n      publishDir = [enabled:false]\n   }\n   withName:SENTIEON_VARCAL_INDEL {\n      ext {\n         prefix = { \"${meta.id}_INDEL\" }\n         args = '--annotation QD --annotation MQRankSum --annotation ReadPosRankSum --annotation FS --annotation SOR --annotation DP --var_type INDEL'\n      }\n      publishDir = [enabled:false]\n   }\n   withName:SENTIEON_APPLYVARCAL_INDEL {\n      ext {\n         prefix = { \"joint_germline_recalibrated\" }\n         args = '--sensitivity 99.9 --var_type INDEL'\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/variant_calling/sentieon_haplotyper/joint_variant_calling/\"}, saveAs:{ filename -> filename.equals('versions.yml') ? null : filename }, pattern:'*{vcf.gz,vcf.gz.tbi}']\n   }\n   withName:SENTIEON_VARCAL_SNP {\n      ext {\n         prefix = { \"${meta.id}_SNP\" }\n         args = '--annotation QD --annotation MQRankSum --annotation ReadPosRankSum --annotation FS --annotation SOR --annotation DP --var_type SNP'\n      }\n      publishDir = [enabled:false]\n   }\n   withName:SENTIEON_APPLYVARCAL_SNP {\n      ext {\n         prefix = { \"${meta.id}_SNP\" }\n         args = '--sensitivity 99.9 --var_type SNP'\n      }\n   }\n   withName:'STRELKA_.*' {\n      ext {\n         prefix = { meta.num_intervals <= 1 ? \"${meta.id}.strelka\" : \"${meta.id}.strelka.${target_bed.simpleName}\" }\n         args = { params.wes ? \"--exome\" : \"\" }\n         when = { params.tools && params.tools.split(',').contains('strelka') }\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/variant_calling/\" }, pattern:'*{vcf.gz,vcf.gz.tbi}', saveAs:{ meta.num_intervals > 1 ? null : \"strelka/${meta.id}/${it}\" }]\n   }\n   withName:'MERGE_STRELKA.*' {\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/variant_calling/strelka/${meta.id}/\" }, pattern:'*{vcf.gz,vcf.gz.tbi}']\n   }\n   withName:MERGE_STRELKA {\n      ext {\n         prefix = {\"${meta.id}.strelka.variants\"}\n      }\n   }\n   withName:MERGE_STRELKA_GENOME {\n      ext {\n         prefix = {\"${meta.id}.strelka.genome\"}\n      }\n   }\n   withName:MERGE_STRELKA_INDELS {\n      ext {\n         prefix = {\"${meta.id}.strelka.somatic_indels\"}\n      }\n   }\n   withName:MERGE_STRELKA_SNVS {\n      ext {\n         prefix = {\"${meta.id}.strelka.somatic_snvs\"}\n      }\n   }\n   withName:TIDDIT_SV {\n      ext {\n         args = { bwa_index ? \"\" : \"--skip_assembly\" }\n         prefix = { \"${meta.id}.tiddit\" }\n         when = { params.tools && params.tools.split(',').contains('tiddit') }\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/variant_calling/tiddit/${meta.id}/\" }, pattern:'*tab']\n   }\n   withName:TABIX_BGZIP_TIDDIT_SV {\n      ext {\n         prefix = { \"${meta.id}.tiddit\" }\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/variant_calling/tiddit/${meta.id}/\" }, pattern:'*{vcf.gz,vcf.gz.tbi}']\n   }\n   withName:'NFCORE_SAREK:SAREK:BAM_VARIANT_CALLING_SOMATIC_ALL:BAM_VARIANT_CALLING_SOMATIC_TIDDIT:TIDDIT_NORMAL:TABIX_BGZIP_TIDDIT_SV' {\n      ext {\n         prefix = {\"${meta.id}.tiddit.normal\"}\n      }\n   }\n   withName:'NFCORE_SAREK:SAREK:BAM_VARIANT_CALLING_SOMATIC_ALL:BAM_VARIANT_CALLING_SOMATIC_TIDDIT:TIDDIT_TUMOR:TABIX_BGZIP_TIDDIT_SV' {\n      ext {\n         prefix = {\"${meta.id}.tiddit.tumor\"}\n      }\n   }\n   withName:'NFCORE_SAREK:SAREK:BAM_VARIANT_CALLING_SOMATIC_ALL:BAM_VARIANT_CALLING_SOMATIC_TIDDIT:SVDB_MERGE' {\n      ext {\n         prefix = { \"${meta.id}.tiddit\" }\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/variant_calling/tiddit/${meta.id}/\" }, pattern:'*vcf.gz']\n   }\n   withName:GERMLINE_VCFS_CONCAT {\n      ext {\n         when = false\n      }\n      publishDir = [enabled:false]\n   }\n   withName:GERMLINE_VCFS_CONCAT_SORT {\n      ext {\n         prefix = { \"${meta.id}.germline\" }\n         when = false\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/variant_calling/concat/${meta.id}/\" }]\n   }\n   withName:TABIX_EXT_VCF {\n      ext {\n         prefix = { \"${input.baseName}\" }\n         when = false\n      }\n   }\n   withName:TABIX_GERMLINE_VCFS_CONCAT_SORT {\n      ext {\n         prefix = { \"${meta.id}.germline\" }\n         when = false\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/variant_calling/concat/${meta.id}/\" }]\n   }\n   withName:ENSEMBLVEP_VEP {\n      ext {\n         args = { [\n                (params.vep_dbnsfp && params.dbnsfp && !params.dbnsfp_consequence)    ? \"--plugin dbNSFP,${params.dbnsfp.split(\"/\")[-1]},${params.dbnsfp_fields}\"                                              : '',\n                (params.vep_dbnsfp && params.dbnsfp && params.dbnsfp_consequence)     ? \"--plugin dbNSFP,'consequence=${params.dbnsfp_consequence}',${params.dbnsfp.split(\"/\")[-1]},${params.dbnsfp_fields}\"   : '',\n                (params.vep_loftee)                                                   ? \"--plugin LoF,loftee_path:/opt/conda/envs/nf-core-vep-${params.vep_version}/share/ensembl-vep-${params.vep_version}-0\" : '',\n                (params.vep_spliceai && params.spliceai_snv && params.spliceai_indel) ? \"--plugin SpliceAI,snv=${params.spliceai_snv.split(\"/\")[-1]},indel=${params.spliceai_indel.split(\"/\")[-1]}\"            : '',\n                (params.vep_spliceregion)                                             ? '--plugin SpliceRegion'                                                                                                : '',\n                (params.vep_out_format)                                               ? \"--${params.vep_out_format}\"                                                                                           : '--vcf',\n                (params.vep_custom_args)                                              ?: ''\n            ].join(' ').trim() }\n         prefix = { vcf.baseName - \".vcf\" + \"_VEP.ann\" }\n      }\n      publishDir = [[mode:'copy', path:{ \"${params.outdir}/reports/EnsemblVEP/${meta.variantcaller}/${meta.id}/\" }, pattern:'*html'], [mode:'copy', path:{ \"${params.outdir}/annotation/${meta.variantcaller}/${meta.id}/\" }, pattern:'*{gz}']]\n   }\n   withName:'NFCORE_SAREK:SAREK:VCF_ANNOTATE_ALL:.*:(TABIX_BGZIPTABIX|TABIX_TABIX)' {\n      ext {\n         prefix = { input.name - \".vcf\" }\n      }\n      publishDir = [mode:'copy', path:{ \"${params.outdir}/annotation/${meta.variantcaller}/${meta.id}/\" }, pattern:'*{gz.tbi}']\n   }\n   executor = 'awsbatch'\n   queue = 'TowerForge-364XA74G8Y30Ha7c8V7Ng9'\n   scratch = false\n}\n\napptainer {\n   registry = 'quay.io'\n}\n\ndocker {\n   registry = 'quay.io'\n}\n\npodman {\n   registry = 'quay.io'\n}\n\nsingularity {\n   registry = 'quay.io'\n}\n\nplugins = ['nf-validation', 'nf-prov']\n\nenv {\n   PYTHONNOUSERSITE = 1\n   R_PROFILE_USER = '/.Rprofile'\n   R_ENVIRON_USER = '/.Renviron'\n   JULIA_DEPOT_PATH = '/usr/local/share/julia'\n}\n\ntimeline {\n   enabled = true\n   file = 'timeline-5KdB2n2FYMc6EK.html'\n}\n\nreport {\n   enabled = true\n   file = 's3://scidev-eu-west-1/projects/fusion_benchmarking/fusionv2_nvme-nf-core_sarek-2-19f92c3f88c74e24b8d4308f47ae46c0//pipeline_info/execution_report_2023-10-11_21-48-33.html'\n}\n\ntrace {\n   enabled = true\n   file = 's3://scidev-eu-west-1/projects/fusion_benchmarking/fusionv2_nvme-nf-core_sarek-2-19f92c3f88c74e24b8d4308f47ae46c0//pipeline_info/execution_trace_2023-10-11_21-48-33.txt'\n}\n\ndag {\n   enabled = true\n   file = 's3://scidev-eu-west-1/projects/fusion_benchmarking/fusionv2_nvme-nf-core_sarek-2-19f92c3f88c74e24b8d4308f47ae46c0//pipeline_info/pipeline_dag_2023-10-11_21-48-33.html'\n}\n\nprov {\n   enabled = true\n   file = 's3://scidev-eu-west-1/projects/fusion_benchmarking/fusionv2_nvme-nf-core_sarek-2-19f92c3f88c74e24b8d4308f47ae46c0//pipeline_info/manifest_2023-10-11_21-48-33.bco.json'\n}\n\nmanifest {\n   name = 'nf-core/sarek'\n   author = 'Maxime Garcia, Szilveszter Juhos, Friederike Hanssen'\n   homePage = 'https://github.com/nf-core/sarek'\n   description = 'An open-source analysis pipeline to detect germline or somatic variants from whole genome or targeted sequencing'\n   mainScript = 'main.nf'\n   nextflowVersion = '!>=23.04.0'\n   version = '3.3.2'\n   doi = '10.12688/f1000research.16665.2, 10.1101/2023.07.19.549462, 10.5281/zenodo.3476425'\n}\n\naws {\n   region = 'eu-west-1'\n   client {\n      uploadChunkSize = 10485760\n   }\n   batch {\n      volumes = '/scratch/fusion:/tmp'\n      executionRole = 'arn:aws:iam::128997144437:role/TowerForge-364XA74G8Y30Ha7c8V7Ng9-ExecutionRole'\n   }\n}\n\nworkDir = 's3://scidev-eu-west-1/scratch/5KdB2n2FYMc6EK'\n\nwave {\n   enabled = true\n   endpoint = 'https://wave.seqera.io'\n}\n\nfusion {\n   enabled = true\n}\n\nrunName = 'aws-fusionv2_nvme-nf-core_sarek-2-19f92c3f88c74e24b8d4308f47ae46c0'\n\ntower {\n   enabled = true\n   endpoint = 'https://api.tower.nf'\n}\n",
  "manifest" : {
    "nextflowVersion" : "!>=23.04.0",
    "defaultBranch" : "master",
    "version" : "3.3.2",
    "homePage" : "https://github.com/nf-core/sarek",
    "description" : "An open-source analysis pipeline to detect germline or somatic variants from whole genome or targeted sequencing",
    "name" : "nf-core/sarek",
    "mainScript" : "main.nf",
    "author" : "Maxime Garcia, Szilveszter Juhos, Friederike Hanssen"
  },
  "nextflow" : {
    "version" : "23.04.4",
    "build" : "5881",
    "timestamp" : "2023-09-25T15:34:00Z"
  },
  "stats" : {
    "computeTimeFmt" : "434.1",
    "cachedCount" : 0,
    "failedCount" : 0,
    "ignoredCount" : 0,
    "succeedCount" : 244,
    "cachedCountFmt" : "0",
    "succeedCountFmt" : "244",
    "failedCountFmt" : "0",
    "ignoredCountFmt" : "0",
    "cachedPct" : 0.0,
    "failedPct" : 0.0,
    "succeedPct" : 100.0,
    "ignoredPct" : 0.0,
    "cachedDuration" : 0,
    "failedDuration" : 0,
    "succeedDuration" : 1562711223
  },
  "projectDir" : "/.nextflow/assets/nf-core/sarek",
  "homeDir" : "/root",
  "container" : "",
  "scriptFile" : "/.nextflow/assets/nf-core/sarek/main.nf",
  "launchDir" : "/",
  "duration" : 26540666,
  "exitStatus" : 0,
  "resume" : false,
  "success" : true
}